
Final_Project_DENEME7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003840  08003840  00013840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038d4  080038d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080038d4  080038d4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038d4  080038d4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038d4  080038d4  000138d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038d8  080038d8  000138d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080038dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000148  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001b8  200001b8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000090c4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001579  00000000  00000000  00029164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000690  00000000  00000000  0002a6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000608  00000000  00000000  0002ad70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d124  00000000  00000000  0002b378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009884  00000000  00000000  0004849c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad42b  00000000  00000000  00051d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000ff14b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001dd8  00000000  00000000  000ff19c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003828 	.word	0x08003828

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003828 	.word	0x08003828

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f000 fa72 	bl	800075c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000278:	f000 f85a 	bl	8000330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027c:	f000 f8e2 	bl	8000444 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000280:	f000 f8b0 	bl	80003e4 <MX_USART2_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		buttonstate[count]=GPIOD->IDR;
 8000284:	4b23      	ldr	r3, [pc, #140]	; (8000314 <main+0xa4>)
 8000286:	691a      	ldr	r2, [r3, #16]
 8000288:	4b23      	ldr	r3, [pc, #140]	; (8000318 <main+0xa8>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	b291      	uxth	r1, r2
 800028e:	4a23      	ldr	r2, [pc, #140]	; (800031c <main+0xac>)
 8000290:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		buttonstate[count] &= 0x3FF;
 8000294:	4b20      	ldr	r3, [pc, #128]	; (8000318 <main+0xa8>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a20      	ldr	r2, [pc, #128]	; (800031c <main+0xac>)
 800029a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800029e:	4b1e      	ldr	r3, [pc, #120]	; (8000318 <main+0xa8>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80002a6:	b291      	uxth	r1, r2
 80002a8:	4a1c      	ldr	r2, [pc, #112]	; (800031c <main+0xac>)
 80002aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		delay_us(0.05);
 80002ae:	2000      	movs	r0, #0
 80002b0:	f000 f930 	bl	8000514 <delay_us>

		count = count + 1 ;
 80002b4:	4b18      	ldr	r3, [pc, #96]	; (8000318 <main+0xa8>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	3301      	adds	r3, #1
 80002ba:	4a17      	ldr	r2, [pc, #92]	; (8000318 <main+0xa8>)
 80002bc:	6013      	str	r3, [r2, #0]

		if(count==SAMPLE){
 80002be:	4b16      	ldr	r3, [pc, #88]	; (8000318 <main+0xa8>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	2b40      	cmp	r3, #64	; 0x40
 80002c4:	d1de      	bne.n	8000284 <main+0x14>

			for(i=0;i<SAMPLE;i++){
 80002c6:	4b16      	ldr	r3, [pc, #88]	; (8000320 <main+0xb0>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
 80002cc:	e01b      	b.n	8000306 <main+0x96>

				itoa (buttonstate[i],buffer,10);
 80002ce:	4b14      	ldr	r3, [pc, #80]	; (8000320 <main+0xb0>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4a12      	ldr	r2, [pc, #72]	; (800031c <main+0xac>)
 80002d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002d8:	220a      	movs	r2, #10
 80002da:	4912      	ldr	r1, [pc, #72]	; (8000324 <main+0xb4>)
 80002dc:	4618      	mov	r0, r3
 80002de:	f002 fde9 	bl	8002eb4 <itoa>
				HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%s " , buffer ), 1000);
 80002e2:	4a10      	ldr	r2, [pc, #64]	; (8000324 <main+0xb4>)
 80002e4:	4910      	ldr	r1, [pc, #64]	; (8000328 <main+0xb8>)
 80002e6:	480f      	ldr	r0, [pc, #60]	; (8000324 <main+0xb4>)
 80002e8:	f002 fdee 	bl	8002ec8 <siprintf>
 80002ec:	4603      	mov	r3, r0
 80002ee:	b29a      	uxth	r2, r3
 80002f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002f4:	490b      	ldr	r1, [pc, #44]	; (8000324 <main+0xb4>)
 80002f6:	480d      	ldr	r0, [pc, #52]	; (800032c <main+0xbc>)
 80002f8:	f002 f980 	bl	80025fc <HAL_UART_Transmit>
			for(i=0;i<SAMPLE;i++){
 80002fc:	4b08      	ldr	r3, [pc, #32]	; (8000320 <main+0xb0>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	3301      	adds	r3, #1
 8000302:	4a07      	ldr	r2, [pc, #28]	; (8000320 <main+0xb0>)
 8000304:	6013      	str	r3, [r2, #0]
 8000306:	4b06      	ldr	r3, [pc, #24]	; (8000320 <main+0xb0>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	2b3f      	cmp	r3, #63	; 0x3f
 800030c:	dddf      	ble.n	80002ce <main+0x5e>
 800030e:	2300      	movs	r3, #0
			break;
		}

  }
  /* USER CODE END 3 */
}
 8000310:	4618      	mov	r0, r3
 8000312:	bd80      	pop	{r7, pc}
 8000314:	48000c00 	.word	0x48000c00
 8000318:	20000110 	.word	0x20000110
 800031c:	20000118 	.word	0x20000118
 8000320:	20000114 	.word	0x20000114
 8000324:	20000198 	.word	0x20000198
 8000328:	08003840 	.word	0x08003840
 800032c:	2000008c 	.word	0x2000008c

08000330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b09e      	sub	sp, #120	; 0x78
 8000334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000336:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800033a:	2228      	movs	r2, #40	; 0x28
 800033c:	2100      	movs	r1, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f002 fdba 	bl	8002eb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000344:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]
 800034c:	605a      	str	r2, [r3, #4]
 800034e:	609a      	str	r2, [r3, #8]
 8000350:	60da      	str	r2, [r3, #12]
 8000352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000354:	463b      	mov	r3, r7
 8000356:	223c      	movs	r2, #60	; 0x3c
 8000358:	2100      	movs	r1, #0
 800035a:	4618      	mov	r0, r3
 800035c:	f002 fdac 	bl	8002eb8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000360:	2301      	movs	r3, #1
 8000362:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000364:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000368:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800036a:	2300      	movs	r3, #0
 800036c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800036e:	2301      	movs	r3, #1
 8000370:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000372:	2302      	movs	r3, #2
 8000374:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000376:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800037a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800037c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000380:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000382:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000386:	4618      	mov	r0, r3
 8000388:	f000 fcc6 	bl	8000d18 <HAL_RCC_OscConfig>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000392:	f000 f8db 	bl	800054c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000396:	230f      	movs	r3, #15
 8000398:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800039a:	2302      	movs	r3, #2
 800039c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800039e:	2300      	movs	r3, #0
 80003a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a8:	2300      	movs	r3, #0
 80003aa:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003b0:	2102      	movs	r1, #2
 80003b2:	4618      	mov	r0, r3
 80003b4:	f001 fcee 	bl	8001d94 <HAL_RCC_ClockConfig>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80003be:	f000 f8c5 	bl	800054c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80003c2:	2302      	movs	r3, #2
 80003c4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003c6:	2300      	movs	r3, #0
 80003c8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ca:	463b      	mov	r3, r7
 80003cc:	4618      	mov	r0, r3
 80003ce:	f001 ff17 	bl	8002200 <HAL_RCCEx_PeriphCLKConfig>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80003d8:	f000 f8b8 	bl	800054c <Error_Handler>
  }
}
 80003dc:	bf00      	nop
 80003de:	3778      	adds	r7, #120	; 0x78
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003e8:	4b14      	ldr	r3, [pc, #80]	; (800043c <MX_USART2_UART_Init+0x58>)
 80003ea:	4a15      	ldr	r2, [pc, #84]	; (8000440 <MX_USART2_UART_Init+0x5c>)
 80003ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003ee:	4b13      	ldr	r3, [pc, #76]	; (800043c <MX_USART2_UART_Init+0x58>)
 80003f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003f6:	4b11      	ldr	r3, [pc, #68]	; (800043c <MX_USART2_UART_Init+0x58>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003fc:	4b0f      	ldr	r3, [pc, #60]	; (800043c <MX_USART2_UART_Init+0x58>)
 80003fe:	2200      	movs	r2, #0
 8000400:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000402:	4b0e      	ldr	r3, [pc, #56]	; (800043c <MX_USART2_UART_Init+0x58>)
 8000404:	2200      	movs	r2, #0
 8000406:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000408:	4b0c      	ldr	r3, [pc, #48]	; (800043c <MX_USART2_UART_Init+0x58>)
 800040a:	220c      	movs	r2, #12
 800040c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800040e:	4b0b      	ldr	r3, [pc, #44]	; (800043c <MX_USART2_UART_Init+0x58>)
 8000410:	2200      	movs	r2, #0
 8000412:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000414:	4b09      	ldr	r3, [pc, #36]	; (800043c <MX_USART2_UART_Init+0x58>)
 8000416:	2200      	movs	r2, #0
 8000418:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800041a:	4b08      	ldr	r3, [pc, #32]	; (800043c <MX_USART2_UART_Init+0x58>)
 800041c:	2200      	movs	r2, #0
 800041e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000420:	4b06      	ldr	r3, [pc, #24]	; (800043c <MX_USART2_UART_Init+0x58>)
 8000422:	2200      	movs	r2, #0
 8000424:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000426:	4805      	ldr	r0, [pc, #20]	; (800043c <MX_USART2_UART_Init+0x58>)
 8000428:	f002 f89a 	bl	8002560 <HAL_UART_Init>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000432:	f000 f88b 	bl	800054c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	2000008c 	.word	0x2000008c
 8000440:	40004400 	.word	0x40004400

08000444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b08a      	sub	sp, #40	; 0x28
 8000448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044a:	f107 0314 	add.w	r3, r7, #20
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
 8000456:	60da      	str	r2, [r3, #12]
 8000458:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800045a:	4b2b      	ldr	r3, [pc, #172]	; (8000508 <MX_GPIO_Init+0xc4>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	4a2a      	ldr	r2, [pc, #168]	; (8000508 <MX_GPIO_Init+0xc4>)
 8000460:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000464:	6153      	str	r3, [r2, #20]
 8000466:	4b28      	ldr	r3, [pc, #160]	; (8000508 <MX_GPIO_Init+0xc4>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800046e:	613b      	str	r3, [r7, #16]
 8000470:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000472:	4b25      	ldr	r3, [pc, #148]	; (8000508 <MX_GPIO_Init+0xc4>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	4a24      	ldr	r2, [pc, #144]	; (8000508 <MX_GPIO_Init+0xc4>)
 8000478:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800047c:	6153      	str	r3, [r2, #20]
 800047e:	4b22      	ldr	r3, [pc, #136]	; (8000508 <MX_GPIO_Init+0xc4>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048a:	4b1f      	ldr	r3, [pc, #124]	; (8000508 <MX_GPIO_Init+0xc4>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	4a1e      	ldr	r2, [pc, #120]	; (8000508 <MX_GPIO_Init+0xc4>)
 8000490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000494:	6153      	str	r3, [r2, #20]
 8000496:	4b1c      	ldr	r3, [pc, #112]	; (8000508 <MX_GPIO_Init+0xc4>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800049e:	60bb      	str	r3, [r7, #8]
 80004a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004a2:	4b19      	ldr	r3, [pc, #100]	; (8000508 <MX_GPIO_Init+0xc4>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4a18      	ldr	r2, [pc, #96]	; (8000508 <MX_GPIO_Init+0xc4>)
 80004a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004ac:	6153      	str	r3, [r2, #20]
 80004ae:	4b16      	ldr	r3, [pc, #88]	; (8000508 <MX_GPIO_Init+0xc4>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80004ba:	2201      	movs	r2, #1
 80004bc:	2102      	movs	r1, #2
 80004be:	4813      	ldr	r0, [pc, #76]	; (800050c <MX_GPIO_Init+0xc8>)
 80004c0:	f000 fc12 	bl	8000ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80004c4:	2302      	movs	r3, #2
 80004c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c8:	2301      	movs	r3, #1
 80004ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004cc:	2300      	movs	r3, #0
 80004ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80004d0:	2301      	movs	r3, #1
 80004d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004d4:	f107 0314 	add.w	r3, r7, #20
 80004d8:	4619      	mov	r1, r3
 80004da:	480c      	ldr	r0, [pc, #48]	; (800050c <MX_GPIO_Init+0xc8>)
 80004dc:	f000 fa8a 	bl	80009f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD0 PD1
                           PD2 PD3 PD4 PD5
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_1
 80004e0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80004e4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e6:	2300      	movs	r3, #0
 80004e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004ea:	2302      	movs	r3, #2
 80004ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ee:	2303      	movs	r3, #3
 80004f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80004f2:	f107 0314 	add.w	r3, r7, #20
 80004f6:	4619      	mov	r1, r3
 80004f8:	4805      	ldr	r0, [pc, #20]	; (8000510 <MX_GPIO_Init+0xcc>)
 80004fa:	f000 fa7b 	bl	80009f4 <HAL_GPIO_Init>

}
 80004fe:	bf00      	nop
 8000500:	3728      	adds	r7, #40	; 0x28
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40021000 	.word	0x40021000
 800050c:	48000800 	.word	0x48000800
 8000510:	48000c00 	.word	0x48000c00

08000514 <delay_us>:




void delay_us(uint32_t us)
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
    // Set the number of clock cycles to delay
    uint32_t cycles = us * 72;
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	4613      	mov	r3, r2
 8000520:	00db      	lsls	r3, r3, #3
 8000522:	4413      	add	r3, r2
 8000524:	00db      	lsls	r3, r3, #3
 8000526:	60bb      	str	r3, [r7, #8]

    // Set the number of loop iterations to delay
    uint32_t i;

    // Enter a loop that delays for the specified number of clock cycles
    for (i = 0; i < cycles; i++)
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	e003      	b.n	8000536 <delay_us+0x22>
    {
        __NOP();
 800052e:	bf00      	nop
    for (i = 0; i < cycles; i++)
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	3301      	adds	r3, #1
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	68fa      	ldr	r2, [r7, #12]
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	429a      	cmp	r2, r3
 800053c:	d3f7      	bcc.n	800052e <delay_us+0x1a>
    }
}
 800053e:	bf00      	nop
 8000540:	bf00      	nop
 8000542:	3714      	adds	r7, #20
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000550:	b672      	cpsid	i
}
 8000552:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000554:	e7fe      	b.n	8000554 <Error_Handler+0x8>
	...

08000558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <HAL_MspInit+0x44>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	4a0e      	ldr	r2, [pc, #56]	; (800059c <HAL_MspInit+0x44>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	6193      	str	r3, [r2, #24]
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <HAL_MspInit+0x44>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <HAL_MspInit+0x44>)
 8000578:	69db      	ldr	r3, [r3, #28]
 800057a:	4a08      	ldr	r2, [pc, #32]	; (800059c <HAL_MspInit+0x44>)
 800057c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000580:	61d3      	str	r3, [r2, #28]
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <HAL_MspInit+0x44>)
 8000584:	69db      	ldr	r3, [r3, #28]
 8000586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058a:	603b      	str	r3, [r7, #0]
 800058c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800058e:	2007      	movs	r0, #7
 8000590:	f000 f9fc 	bl	800098c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40021000 	.word	0x40021000

080005a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	; 0x28
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a17      	ldr	r2, [pc, #92]	; (800061c <HAL_UART_MspInit+0x7c>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d128      	bne.n	8000614 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005c2:	4b17      	ldr	r3, [pc, #92]	; (8000620 <HAL_UART_MspInit+0x80>)
 80005c4:	69db      	ldr	r3, [r3, #28]
 80005c6:	4a16      	ldr	r2, [pc, #88]	; (8000620 <HAL_UART_MspInit+0x80>)
 80005c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005cc:	61d3      	str	r3, [r2, #28]
 80005ce:	4b14      	ldr	r3, [pc, #80]	; (8000620 <HAL_UART_MspInit+0x80>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	4b11      	ldr	r3, [pc, #68]	; (8000620 <HAL_UART_MspInit+0x80>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	4a10      	ldr	r2, [pc, #64]	; (8000620 <HAL_UART_MspInit+0x80>)
 80005e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e4:	6153      	str	r3, [r2, #20]
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <HAL_UART_MspInit+0x80>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80005f2:	230c      	movs	r3, #12
 80005f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f6:	2302      	movs	r3, #2
 80005f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005fe:	2303      	movs	r3, #3
 8000600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000602:	2307      	movs	r3, #7
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4619      	mov	r1, r3
 800060c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000610:	f000 f9f0 	bl	80009f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000614:	bf00      	nop
 8000616:	3728      	adds	r7, #40	; 0x28
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40004400 	.word	0x40004400
 8000620:	40021000 	.word	0x40021000

08000624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000628:	e7fe      	b.n	8000628 <NMI_Handler+0x4>

0800062a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800062e:	e7fe      	b.n	800062e <HardFault_Handler+0x4>

08000630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000634:	e7fe      	b.n	8000634 <MemManage_Handler+0x4>

08000636 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800063a:	e7fe      	b.n	800063a <BusFault_Handler+0x4>

0800063c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000640:	e7fe      	b.n	8000640 <UsageFault_Handler+0x4>

08000642 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr

0800065e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000662:	bf00      	nop
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000670:	f000 f8ba 	bl	80007e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}

08000678 <_sbrk>:
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	4a14      	ldr	r2, [pc, #80]	; (80006d4 <_sbrk+0x5c>)
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <_sbrk+0x60>)
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	617b      	str	r3, [r7, #20]
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	613b      	str	r3, [r7, #16]
 800068c:	4b13      	ldr	r3, [pc, #76]	; (80006dc <_sbrk+0x64>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d102      	bne.n	800069a <_sbrk+0x22>
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <_sbrk+0x64>)
 8000696:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <_sbrk+0x68>)
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <_sbrk+0x64>)
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4413      	add	r3, r2
 80006a2:	693a      	ldr	r2, [r7, #16]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d207      	bcs.n	80006b8 <_sbrk+0x40>
 80006a8:	f002 fbc2 	bl	8002e30 <__errno>
 80006ac:	4603      	mov	r3, r0
 80006ae:	220c      	movs	r2, #12
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295
 80006b6:	e009      	b.n	80006cc <_sbrk+0x54>
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <_sbrk+0x64>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	4b07      	ldr	r3, [pc, #28]	; (80006dc <_sbrk+0x64>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4413      	add	r3, r2
 80006c6:	4a05      	ldr	r2, [pc, #20]	; (80006dc <_sbrk+0x64>)
 80006c8:	6013      	str	r3, [r2, #0]
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	4618      	mov	r0, r3
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	2000a000 	.word	0x2000a000
 80006d8:	00000400 	.word	0x00000400
 80006dc:	200001a0 	.word	0x200001a0
 80006e0:	200001b8 	.word	0x200001b8

080006e4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <SystemInit+0x20>)
 80006ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ee:	4a05      	ldr	r2, [pc, #20]	; (8000704 <SystemInit+0x20>)
 80006f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <Reset_Handler>:
 8000708:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000740 <LoopForever+0x2>
 800070c:	480d      	ldr	r0, [pc, #52]	; (8000744 <LoopForever+0x6>)
 800070e:	490e      	ldr	r1, [pc, #56]	; (8000748 <LoopForever+0xa>)
 8000710:	4a0e      	ldr	r2, [pc, #56]	; (800074c <LoopForever+0xe>)
 8000712:	2300      	movs	r3, #0
 8000714:	e002      	b.n	800071c <LoopCopyDataInit>

08000716 <CopyDataInit>:
 8000716:	58d4      	ldr	r4, [r2, r3]
 8000718:	50c4      	str	r4, [r0, r3]
 800071a:	3304      	adds	r3, #4

0800071c <LoopCopyDataInit>:
 800071c:	18c4      	adds	r4, r0, r3
 800071e:	428c      	cmp	r4, r1
 8000720:	d3f9      	bcc.n	8000716 <CopyDataInit>
 8000722:	4a0b      	ldr	r2, [pc, #44]	; (8000750 <LoopForever+0x12>)
 8000724:	4c0b      	ldr	r4, [pc, #44]	; (8000754 <LoopForever+0x16>)
 8000726:	2300      	movs	r3, #0
 8000728:	e001      	b.n	800072e <LoopFillZerobss>

0800072a <FillZerobss>:
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	3204      	adds	r2, #4

0800072e <LoopFillZerobss>:
 800072e:	42a2      	cmp	r2, r4
 8000730:	d3fb      	bcc.n	800072a <FillZerobss>
 8000732:	f7ff ffd7 	bl	80006e4 <SystemInit>
 8000736:	f002 fb81 	bl	8002e3c <__libc_init_array>
 800073a:	f7ff fd99 	bl	8000270 <main>

0800073e <LoopForever>:
 800073e:	e7fe      	b.n	800073e <LoopForever>
 8000740:	2000a000 	.word	0x2000a000
 8000744:	20000000 	.word	0x20000000
 8000748:	20000070 	.word	0x20000070
 800074c:	080038dc 	.word	0x080038dc
 8000750:	20000070 	.word	0x20000070
 8000754:	200001b8 	.word	0x200001b8

08000758 <ADC1_2_IRQHandler>:
 8000758:	e7fe      	b.n	8000758 <ADC1_2_IRQHandler>
	...

0800075c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <HAL_Init+0x28>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a07      	ldr	r2, [pc, #28]	; (8000784 <HAL_Init+0x28>)
 8000766:	f043 0310 	orr.w	r3, r3, #16
 800076a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800076c:	2003      	movs	r0, #3
 800076e:	f000 f90d 	bl	800098c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000772:	2000      	movs	r0, #0
 8000774:	f000 f808 	bl	8000788 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000778:	f7ff feee 	bl	8000558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40022000 	.word	0x40022000

08000788 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <HAL_InitTick+0x54>)
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <HAL_InitTick+0x58>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	4619      	mov	r1, r3
 800079a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800079e:	fbb3 f3f1 	udiv	r3, r3, r1
 80007a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 f917 	bl	80009da <HAL_SYSTICK_Config>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007b2:	2301      	movs	r3, #1
 80007b4:	e00e      	b.n	80007d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2b0f      	cmp	r3, #15
 80007ba:	d80a      	bhi.n	80007d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007bc:	2200      	movs	r2, #0
 80007be:	6879      	ldr	r1, [r7, #4]
 80007c0:	f04f 30ff 	mov.w	r0, #4294967295
 80007c4:	f000 f8ed 	bl	80009a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007c8:	4a06      	ldr	r2, [pc, #24]	; (80007e4 <HAL_InitTick+0x5c>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007ce:	2300      	movs	r3, #0
 80007d0:	e000      	b.n	80007d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007d2:	2301      	movs	r3, #1
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000000 	.word	0x20000000
 80007e0:	20000008 	.word	0x20000008
 80007e4:	20000004 	.word	0x20000004

080007e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <HAL_IncTick+0x20>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	461a      	mov	r2, r3
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <HAL_IncTick+0x24>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4413      	add	r3, r2
 80007f8:	4a04      	ldr	r2, [pc, #16]	; (800080c <HAL_IncTick+0x24>)
 80007fa:	6013      	str	r3, [r2, #0]
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	20000008 	.word	0x20000008
 800080c:	200001a4 	.word	0x200001a4

08000810 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  return uwTick;  
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <HAL_GetTick+0x14>)
 8000816:	681b      	ldr	r3, [r3, #0]
}
 8000818:	4618      	mov	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	200001a4 	.word	0x200001a4

08000828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f003 0307 	and.w	r3, r3, #7
 8000836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <__NVIC_SetPriorityGrouping+0x44>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800083e:	68ba      	ldr	r2, [r7, #8]
 8000840:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000844:	4013      	ands	r3, r2
 8000846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000850:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800085a:	4a04      	ldr	r2, [pc, #16]	; (800086c <__NVIC_SetPriorityGrouping+0x44>)
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	60d3      	str	r3, [r2, #12]
}
 8000860:	bf00      	nop
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000874:	4b04      	ldr	r3, [pc, #16]	; (8000888 <__NVIC_GetPriorityGrouping+0x18>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	0a1b      	lsrs	r3, r3, #8
 800087a:	f003 0307 	and.w	r3, r3, #7
}
 800087e:	4618      	mov	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	6039      	str	r1, [r7, #0]
 8000896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089c:	2b00      	cmp	r3, #0
 800089e:	db0a      	blt.n	80008b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	490c      	ldr	r1, [pc, #48]	; (80008d8 <__NVIC_SetPriority+0x4c>)
 80008a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008aa:	0112      	lsls	r2, r2, #4
 80008ac:	b2d2      	uxtb	r2, r2
 80008ae:	440b      	add	r3, r1
 80008b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008b4:	e00a      	b.n	80008cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	4908      	ldr	r1, [pc, #32]	; (80008dc <__NVIC_SetPriority+0x50>)
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	f003 030f 	and.w	r3, r3, #15
 80008c2:	3b04      	subs	r3, #4
 80008c4:	0112      	lsls	r2, r2, #4
 80008c6:	b2d2      	uxtb	r2, r2
 80008c8:	440b      	add	r3, r1
 80008ca:	761a      	strb	r2, [r3, #24]
}
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	e000e100 	.word	0xe000e100
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b089      	sub	sp, #36	; 0x24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	f003 0307 	and.w	r3, r3, #7
 80008f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	f1c3 0307 	rsb	r3, r3, #7
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	bf28      	it	cs
 80008fe:	2304      	movcs	r3, #4
 8000900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	3304      	adds	r3, #4
 8000906:	2b06      	cmp	r3, #6
 8000908:	d902      	bls.n	8000910 <NVIC_EncodePriority+0x30>
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	3b03      	subs	r3, #3
 800090e:	e000      	b.n	8000912 <NVIC_EncodePriority+0x32>
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000914:	f04f 32ff 	mov.w	r2, #4294967295
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	43da      	mvns	r2, r3
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	401a      	ands	r2, r3
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000928:	f04f 31ff 	mov.w	r1, #4294967295
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	fa01 f303 	lsl.w	r3, r1, r3
 8000932:	43d9      	mvns	r1, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000938:	4313      	orrs	r3, r2
         );
}
 800093a:	4618      	mov	r0, r3
 800093c:	3724      	adds	r7, #36	; 0x24
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
	...

08000948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3b01      	subs	r3, #1
 8000954:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000958:	d301      	bcc.n	800095e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800095a:	2301      	movs	r3, #1
 800095c:	e00f      	b.n	800097e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800095e:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <SysTick_Config+0x40>)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3b01      	subs	r3, #1
 8000964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000966:	210f      	movs	r1, #15
 8000968:	f04f 30ff 	mov.w	r0, #4294967295
 800096c:	f7ff ff8e 	bl	800088c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000970:	4b05      	ldr	r3, [pc, #20]	; (8000988 <SysTick_Config+0x40>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000976:	4b04      	ldr	r3, [pc, #16]	; (8000988 <SysTick_Config+0x40>)
 8000978:	2207      	movs	r2, #7
 800097a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	e000e010 	.word	0xe000e010

0800098c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f7ff ff47 	bl	8000828 <__NVIC_SetPriorityGrouping>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b086      	sub	sp, #24
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	4603      	mov	r3, r0
 80009aa:	60b9      	str	r1, [r7, #8]
 80009ac:	607a      	str	r2, [r7, #4]
 80009ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009b4:	f7ff ff5c 	bl	8000870 <__NVIC_GetPriorityGrouping>
 80009b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	68b9      	ldr	r1, [r7, #8]
 80009be:	6978      	ldr	r0, [r7, #20]
 80009c0:	f7ff ff8e 	bl	80008e0 <NVIC_EncodePriority>
 80009c4:	4602      	mov	r2, r0
 80009c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ca:	4611      	mov	r1, r2
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ff5d 	bl	800088c <__NVIC_SetPriority>
}
 80009d2:	bf00      	nop
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f7ff ffb0 	bl	8000948 <SysTick_Config>
 80009e8:	4603      	mov	r3, r0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b087      	sub	sp, #28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a02:	e154      	b.n	8000cae <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	2101      	movs	r1, #1
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a10:	4013      	ands	r3, r2
 8000a12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	f000 8146 	beq.w	8000ca8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f003 0303 	and.w	r3, r3, #3
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d005      	beq.n	8000a34 <HAL_GPIO_Init+0x40>
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f003 0303 	and.w	r3, r3, #3
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d130      	bne.n	8000a96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	2203      	movs	r2, #3
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	43db      	mvns	r3, r3
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	68da      	ldr	r2, [r3, #12]
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43db      	mvns	r3, r3
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	4013      	ands	r3, r2
 8000a78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	091b      	lsrs	r3, r3, #4
 8000a80:	f003 0201 	and.w	r2, r3, #1
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f003 0303 	and.w	r3, r3, #3
 8000a9e:	2b03      	cmp	r3, #3
 8000aa0:	d017      	beq.n	8000ad2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	2203      	movs	r2, #3
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	689a      	ldr	r2, [r3, #8]
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f003 0303 	and.w	r3, r3, #3
 8000ada:	2b02      	cmp	r3, #2
 8000adc:	d123      	bne.n	8000b26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	08da      	lsrs	r2, r3, #3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	3208      	adds	r2, #8
 8000ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	220f      	movs	r2, #15
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	43db      	mvns	r3, r3
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	4013      	ands	r3, r2
 8000b00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	691a      	ldr	r2, [r3, #16]
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	f003 0307 	and.w	r3, r3, #7
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	08da      	lsrs	r2, r3, #3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3208      	adds	r2, #8
 8000b20:	6939      	ldr	r1, [r7, #16]
 8000b22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	2203      	movs	r2, #3
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43db      	mvns	r3, r3
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f003 0203 	and.w	r2, r3, #3
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	f000 80a0 	beq.w	8000ca8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b68:	4b58      	ldr	r3, [pc, #352]	; (8000ccc <HAL_GPIO_Init+0x2d8>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	4a57      	ldr	r2, [pc, #348]	; (8000ccc <HAL_GPIO_Init+0x2d8>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	6193      	str	r3, [r2, #24]
 8000b74:	4b55      	ldr	r3, [pc, #340]	; (8000ccc <HAL_GPIO_Init+0x2d8>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b80:	4a53      	ldr	r2, [pc, #332]	; (8000cd0 <HAL_GPIO_Init+0x2dc>)
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	089b      	lsrs	r3, r3, #2
 8000b86:	3302      	adds	r3, #2
 8000b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	f003 0303 	and.w	r3, r3, #3
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	220f      	movs	r2, #15
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000baa:	d019      	beq.n	8000be0 <HAL_GPIO_Init+0x1ec>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a49      	ldr	r2, [pc, #292]	; (8000cd4 <HAL_GPIO_Init+0x2e0>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d013      	beq.n	8000bdc <HAL_GPIO_Init+0x1e8>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a48      	ldr	r2, [pc, #288]	; (8000cd8 <HAL_GPIO_Init+0x2e4>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d00d      	beq.n	8000bd8 <HAL_GPIO_Init+0x1e4>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a47      	ldr	r2, [pc, #284]	; (8000cdc <HAL_GPIO_Init+0x2e8>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d007      	beq.n	8000bd4 <HAL_GPIO_Init+0x1e0>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a46      	ldr	r2, [pc, #280]	; (8000ce0 <HAL_GPIO_Init+0x2ec>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d101      	bne.n	8000bd0 <HAL_GPIO_Init+0x1dc>
 8000bcc:	2304      	movs	r3, #4
 8000bce:	e008      	b.n	8000be2 <HAL_GPIO_Init+0x1ee>
 8000bd0:	2305      	movs	r3, #5
 8000bd2:	e006      	b.n	8000be2 <HAL_GPIO_Init+0x1ee>
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	e004      	b.n	8000be2 <HAL_GPIO_Init+0x1ee>
 8000bd8:	2302      	movs	r3, #2
 8000bda:	e002      	b.n	8000be2 <HAL_GPIO_Init+0x1ee>
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e000      	b.n	8000be2 <HAL_GPIO_Init+0x1ee>
 8000be0:	2300      	movs	r3, #0
 8000be2:	697a      	ldr	r2, [r7, #20]
 8000be4:	f002 0203 	and.w	r2, r2, #3
 8000be8:	0092      	lsls	r2, r2, #2
 8000bea:	4093      	lsls	r3, r2
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bf2:	4937      	ldr	r1, [pc, #220]	; (8000cd0 <HAL_GPIO_Init+0x2dc>)
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	089b      	lsrs	r3, r3, #2
 8000bf8:	3302      	adds	r3, #2
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c00:	4b38      	ldr	r3, [pc, #224]	; (8000ce4 <HAL_GPIO_Init+0x2f0>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d003      	beq.n	8000c24 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c24:	4a2f      	ldr	r2, [pc, #188]	; (8000ce4 <HAL_GPIO_Init+0x2f0>)
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ce4 <HAL_GPIO_Init+0x2f0>)
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	43db      	mvns	r3, r3
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	4013      	ands	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d003      	beq.n	8000c4e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c4e:	4a25      	ldr	r2, [pc, #148]	; (8000ce4 <HAL_GPIO_Init+0x2f0>)
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c54:	4b23      	ldr	r3, [pc, #140]	; (8000ce4 <HAL_GPIO_Init+0x2f0>)
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	4013      	ands	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d003      	beq.n	8000c78 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c78:	4a1a      	ldr	r2, [pc, #104]	; (8000ce4 <HAL_GPIO_Init+0x2f0>)
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c7e:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <HAL_GPIO_Init+0x2f0>)
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	43db      	mvns	r3, r3
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d003      	beq.n	8000ca2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ca2:	4a10      	ldr	r2, [pc, #64]	; (8000ce4 <HAL_GPIO_Init+0x2f0>)
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	3301      	adds	r3, #1
 8000cac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	f47f aea3 	bne.w	8000a04 <HAL_GPIO_Init+0x10>
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	bf00      	nop
 8000cc2:	371c      	adds	r7, #28
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	40010000 	.word	0x40010000
 8000cd4:	48000400 	.word	0x48000400
 8000cd8:	48000800 	.word	0x48000800
 8000cdc:	48000c00 	.word	0x48000c00
 8000ce0:	48001000 	.word	0x48001000
 8000ce4:	40010400 	.word	0x40010400

08000ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	807b      	strh	r3, [r7, #2]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cf8:	787b      	ldrb	r3, [r7, #1]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d003      	beq.n	8000d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cfe:	887a      	ldrh	r2, [r7, #2]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d04:	e002      	b.n	8000d0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d06:	887a      	ldrh	r2, [r7, #2]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d28:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d102      	bne.n	8000d3e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	f001 b823 	b.w	8001d84 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f000 817d 	beq.w	800104e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d54:	4bbc      	ldr	r3, [pc, #752]	; (8001048 <HAL_RCC_OscConfig+0x330>)
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f003 030c 	and.w	r3, r3, #12
 8000d5c:	2b04      	cmp	r3, #4
 8000d5e:	d00c      	beq.n	8000d7a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d60:	4bb9      	ldr	r3, [pc, #740]	; (8001048 <HAL_RCC_OscConfig+0x330>)
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 030c 	and.w	r3, r3, #12
 8000d68:	2b08      	cmp	r3, #8
 8000d6a:	d15c      	bne.n	8000e26 <HAL_RCC_OscConfig+0x10e>
 8000d6c:	4bb6      	ldr	r3, [pc, #728]	; (8001048 <HAL_RCC_OscConfig+0x330>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d78:	d155      	bne.n	8000e26 <HAL_RCC_OscConfig+0x10e>
 8000d7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d7e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d82:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000d86:	fa93 f3a3 	rbit	r3, r3
 8000d8a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d8e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d92:	fab3 f383 	clz	r3, r3
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	095b      	lsrs	r3, r3, #5
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d102      	bne.n	8000dac <HAL_RCC_OscConfig+0x94>
 8000da6:	4ba8      	ldr	r3, [pc, #672]	; (8001048 <HAL_RCC_OscConfig+0x330>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	e015      	b.n	8000dd8 <HAL_RCC_OscConfig+0xc0>
 8000dac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000db0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000db8:	fa93 f3a3 	rbit	r3, r3
 8000dbc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000dc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dc4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000dc8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000dcc:	fa93 f3a3 	rbit	r3, r3
 8000dd0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000dd4:	4b9c      	ldr	r3, [pc, #624]	; (8001048 <HAL_RCC_OscConfig+0x330>)
 8000dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ddc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000de0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000de4:	fa92 f2a2 	rbit	r2, r2
 8000de8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000dec:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000df0:	fab2 f282 	clz	r2, r2
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	f042 0220 	orr.w	r2, r2, #32
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	f002 021f 	and.w	r2, r2, #31
 8000e00:	2101      	movs	r1, #1
 8000e02:	fa01 f202 	lsl.w	r2, r1, r2
 8000e06:	4013      	ands	r3, r2
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 811f 	beq.w	800104c <HAL_RCC_OscConfig+0x334>
 8000e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f040 8116 	bne.w	800104c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	f000 bfaf 	b.w	8001d84 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e36:	d106      	bne.n	8000e46 <HAL_RCC_OscConfig+0x12e>
 8000e38:	4b83      	ldr	r3, [pc, #524]	; (8001048 <HAL_RCC_OscConfig+0x330>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a82      	ldr	r2, [pc, #520]	; (8001048 <HAL_RCC_OscConfig+0x330>)
 8000e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e42:	6013      	str	r3, [r2, #0]
 8000e44:	e036      	b.n	8000eb4 <HAL_RCC_OscConfig+0x19c>
 8000e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d10c      	bne.n	8000e70 <HAL_RCC_OscConfig+0x158>
 8000e56:	4b7c      	ldr	r3, [pc, #496]	; (8001048 <HAL_RCC_OscConfig+0x330>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a7b      	ldr	r2, [pc, #492]	; (8001048 <HAL_RCC_OscConfig+0x330>)
 8000e5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e60:	6013      	str	r3, [r2, #0]
 8000e62:	4b79      	ldr	r3, [pc, #484]	; (8001048 <HAL_RCC_OscConfig+0x330>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a78      	ldr	r2, [pc, #480]	; (8001048 <HAL_RCC_OscConfig+0x330>)
 8000e68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e6c:	6013      	str	r3, [r2, #0]
 8000e6e:	e021      	b.n	8000eb4 <HAL_RCC_OscConfig+0x19c>
 8000e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e80:	d10c      	bne.n	8000e9c <HAL_RCC_OscConfig+0x184>
 8000e82:	4b71      	ldr	r3, [pc, #452]	; (8001048 <HAL_RCC_OscConfig+0x330>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a70      	ldr	r2, [pc, #448]	; (8001048 <HAL_RCC_OscConfig+0x330>)
 8000e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	4b6e      	ldr	r3, [pc, #440]	; (8001048 <HAL_RCC_OscConfig+0x330>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a6d      	ldr	r2, [pc, #436]	; (8001048 <HAL_RCC_OscConfig+0x330>)
 8000e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e98:	6013      	str	r3, [r2, #0]
 8000e9a:	e00b      	b.n	8000eb4 <HAL_RCC_OscConfig+0x19c>
 8000e9c:	4b6a      	ldr	r3, [pc, #424]	; (8001048 <HAL_RCC_OscConfig+0x330>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a69      	ldr	r2, [pc, #420]	; (8001048 <HAL_RCC_OscConfig+0x330>)
 8000ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ea6:	6013      	str	r3, [r2, #0]
 8000ea8:	4b67      	ldr	r3, [pc, #412]	; (8001048 <HAL_RCC_OscConfig+0x330>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a66      	ldr	r2, [pc, #408]	; (8001048 <HAL_RCC_OscConfig+0x330>)
 8000eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000eb4:	4b64      	ldr	r3, [pc, #400]	; (8001048 <HAL_RCC_OscConfig+0x330>)
 8000eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb8:	f023 020f 	bic.w	r2, r3, #15
 8000ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ec0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	495f      	ldr	r1, [pc, #380]	; (8001048 <HAL_RCC_OscConfig+0x330>)
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ed2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d059      	beq.n	8000f92 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ede:	f7ff fc97 	bl	8000810 <HAL_GetTick>
 8000ee2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ee6:	e00a      	b.n	8000efe <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ee8:	f7ff fc92 	bl	8000810 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	2b64      	cmp	r3, #100	; 0x64
 8000ef6:	d902      	bls.n	8000efe <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	f000 bf43 	b.w	8001d84 <HAL_RCC_OscConfig+0x106c>
 8000efe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f02:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f06:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000f0a:	fa93 f3a3 	rbit	r3, r3
 8000f0e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000f12:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f16:	fab3 f383 	clz	r3, r3
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	095b      	lsrs	r3, r3, #5
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d102      	bne.n	8000f30 <HAL_RCC_OscConfig+0x218>
 8000f2a:	4b47      	ldr	r3, [pc, #284]	; (8001048 <HAL_RCC_OscConfig+0x330>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	e015      	b.n	8000f5c <HAL_RCC_OscConfig+0x244>
 8000f30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f34:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f38:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000f3c:	fa93 f3a3 	rbit	r3, r3
 8000f40:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f48:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f4c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000f50:	fa93 f3a3 	rbit	r3, r3
 8000f54:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000f58:	4b3b      	ldr	r3, [pc, #236]	; (8001048 <HAL_RCC_OscConfig+0x330>)
 8000f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f60:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000f64:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f68:	fa92 f2a2 	rbit	r2, r2
 8000f6c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000f70:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000f74:	fab2 f282 	clz	r2, r2
 8000f78:	b2d2      	uxtb	r2, r2
 8000f7a:	f042 0220 	orr.w	r2, r2, #32
 8000f7e:	b2d2      	uxtb	r2, r2
 8000f80:	f002 021f 	and.w	r2, r2, #31
 8000f84:	2101      	movs	r1, #1
 8000f86:	fa01 f202 	lsl.w	r2, r1, r2
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d0ab      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x1d0>
 8000f90:	e05d      	b.n	800104e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f92:	f7ff fc3d 	bl	8000810 <HAL_GetTick>
 8000f96:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f9a:	e00a      	b.n	8000fb2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f9c:	f7ff fc38 	bl	8000810 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	2b64      	cmp	r3, #100	; 0x64
 8000faa:	d902      	bls.n	8000fb2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000fac:	2303      	movs	r3, #3
 8000fae:	f000 bee9 	b.w	8001d84 <HAL_RCC_OscConfig+0x106c>
 8000fb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fb6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fba:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000fbe:	fa93 f3a3 	rbit	r3, r3
 8000fc2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000fc6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fca:	fab3 f383 	clz	r3, r3
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	095b      	lsrs	r3, r3, #5
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d102      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x2cc>
 8000fde:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <HAL_RCC_OscConfig+0x330>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	e015      	b.n	8001010 <HAL_RCC_OscConfig+0x2f8>
 8000fe4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fe8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fec:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000ff0:	fa93 f3a3 	rbit	r3, r3
 8000ff4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000ff8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ffc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001000:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001004:	fa93 f3a3 	rbit	r3, r3
 8001008:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <HAL_RCC_OscConfig+0x330>)
 800100e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001010:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001014:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001018:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800101c:	fa92 f2a2 	rbit	r2, r2
 8001020:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001024:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001028:	fab2 f282 	clz	r2, r2
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	f042 0220 	orr.w	r2, r2, #32
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	f002 021f 	and.w	r2, r2, #31
 8001038:	2101      	movs	r1, #1
 800103a:	fa01 f202 	lsl.w	r2, r1, r2
 800103e:	4013      	ands	r3, r2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1ab      	bne.n	8000f9c <HAL_RCC_OscConfig+0x284>
 8001044:	e003      	b.n	800104e <HAL_RCC_OscConfig+0x336>
 8001046:	bf00      	nop
 8001048:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800104c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800104e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001052:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	2b00      	cmp	r3, #0
 8001060:	f000 817d 	beq.w	800135e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001064:	4ba6      	ldr	r3, [pc, #664]	; (8001300 <HAL_RCC_OscConfig+0x5e8>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 030c 	and.w	r3, r3, #12
 800106c:	2b00      	cmp	r3, #0
 800106e:	d00b      	beq.n	8001088 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001070:	4ba3      	ldr	r3, [pc, #652]	; (8001300 <HAL_RCC_OscConfig+0x5e8>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 030c 	and.w	r3, r3, #12
 8001078:	2b08      	cmp	r3, #8
 800107a:	d172      	bne.n	8001162 <HAL_RCC_OscConfig+0x44a>
 800107c:	4ba0      	ldr	r3, [pc, #640]	; (8001300 <HAL_RCC_OscConfig+0x5e8>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d16c      	bne.n	8001162 <HAL_RCC_OscConfig+0x44a>
 8001088:	2302      	movs	r3, #2
 800108a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001092:	fa93 f3a3 	rbit	r3, r3
 8001096:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800109a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800109e:	fab3 f383 	clz	r3, r3
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	095b      	lsrs	r3, r3, #5
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d102      	bne.n	80010b8 <HAL_RCC_OscConfig+0x3a0>
 80010b2:	4b93      	ldr	r3, [pc, #588]	; (8001300 <HAL_RCC_OscConfig+0x5e8>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	e013      	b.n	80010e0 <HAL_RCC_OscConfig+0x3c8>
 80010b8:	2302      	movs	r3, #2
 80010ba:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010be:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80010c2:	fa93 f3a3 	rbit	r3, r3
 80010c6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80010ca:	2302      	movs	r3, #2
 80010cc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80010d0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80010d4:	fa93 f3a3 	rbit	r3, r3
 80010d8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80010dc:	4b88      	ldr	r3, [pc, #544]	; (8001300 <HAL_RCC_OscConfig+0x5e8>)
 80010de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e0:	2202      	movs	r2, #2
 80010e2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80010e6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80010ea:	fa92 f2a2 	rbit	r2, r2
 80010ee:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80010f2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80010f6:	fab2 f282 	clz	r2, r2
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	f042 0220 	orr.w	r2, r2, #32
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	f002 021f 	and.w	r2, r2, #31
 8001106:	2101      	movs	r1, #1
 8001108:	fa01 f202 	lsl.w	r2, r1, r2
 800110c:	4013      	ands	r3, r2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00a      	beq.n	8001128 <HAL_RCC_OscConfig+0x410>
 8001112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001116:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d002      	beq.n	8001128 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	f000 be2e 	b.w	8001d84 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001128:	4b75      	ldr	r3, [pc, #468]	; (8001300 <HAL_RCC_OscConfig+0x5e8>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001134:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	695b      	ldr	r3, [r3, #20]
 800113c:	21f8      	movs	r1, #248	; 0xf8
 800113e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001142:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001146:	fa91 f1a1 	rbit	r1, r1
 800114a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800114e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001152:	fab1 f181 	clz	r1, r1
 8001156:	b2c9      	uxtb	r1, r1
 8001158:	408b      	lsls	r3, r1
 800115a:	4969      	ldr	r1, [pc, #420]	; (8001300 <HAL_RCC_OscConfig+0x5e8>)
 800115c:	4313      	orrs	r3, r2
 800115e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001160:	e0fd      	b.n	800135e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001166:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	2b00      	cmp	r3, #0
 8001170:	f000 8088 	beq.w	8001284 <HAL_RCC_OscConfig+0x56c>
 8001174:	2301      	movs	r3, #1
 8001176:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800117a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800117e:	fa93 f3a3 	rbit	r3, r3
 8001182:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001186:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800118a:	fab3 f383 	clz	r3, r3
 800118e:	b2db      	uxtb	r3, r3
 8001190:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001194:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	461a      	mov	r2, r3
 800119c:	2301      	movs	r3, #1
 800119e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a0:	f7ff fb36 	bl	8000810 <HAL_GetTick>
 80011a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a8:	e00a      	b.n	80011c0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011aa:	f7ff fb31 	bl	8000810 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d902      	bls.n	80011c0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	f000 bde2 	b.w	8001d84 <HAL_RCC_OscConfig+0x106c>
 80011c0:	2302      	movs	r3, #2
 80011c2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80011ca:	fa93 f3a3 	rbit	r3, r3
 80011ce:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80011d2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d6:	fab3 f383 	clz	r3, r3
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	095b      	lsrs	r3, r3, #5
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d102      	bne.n	80011f0 <HAL_RCC_OscConfig+0x4d8>
 80011ea:	4b45      	ldr	r3, [pc, #276]	; (8001300 <HAL_RCC_OscConfig+0x5e8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	e013      	b.n	8001218 <HAL_RCC_OscConfig+0x500>
 80011f0:	2302      	movs	r3, #2
 80011f2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80011fa:	fa93 f3a3 	rbit	r3, r3
 80011fe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001202:	2302      	movs	r3, #2
 8001204:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001208:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800120c:	fa93 f3a3 	rbit	r3, r3
 8001210:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001214:	4b3a      	ldr	r3, [pc, #232]	; (8001300 <HAL_RCC_OscConfig+0x5e8>)
 8001216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001218:	2202      	movs	r2, #2
 800121a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800121e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001222:	fa92 f2a2 	rbit	r2, r2
 8001226:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800122a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800122e:	fab2 f282 	clz	r2, r2
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	f042 0220 	orr.w	r2, r2, #32
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	f002 021f 	and.w	r2, r2, #31
 800123e:	2101      	movs	r1, #1
 8001240:	fa01 f202 	lsl.w	r2, r1, r2
 8001244:	4013      	ands	r3, r2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0af      	beq.n	80011aa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124a:	4b2d      	ldr	r3, [pc, #180]	; (8001300 <HAL_RCC_OscConfig+0x5e8>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001256:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	21f8      	movs	r1, #248	; 0xf8
 8001260:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001264:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001268:	fa91 f1a1 	rbit	r1, r1
 800126c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001270:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001274:	fab1 f181 	clz	r1, r1
 8001278:	b2c9      	uxtb	r1, r1
 800127a:	408b      	lsls	r3, r1
 800127c:	4920      	ldr	r1, [pc, #128]	; (8001300 <HAL_RCC_OscConfig+0x5e8>)
 800127e:	4313      	orrs	r3, r2
 8001280:	600b      	str	r3, [r1, #0]
 8001282:	e06c      	b.n	800135e <HAL_RCC_OscConfig+0x646>
 8001284:	2301      	movs	r3, #1
 8001286:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800128e:	fa93 f3a3 	rbit	r3, r3
 8001292:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001296:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800129a:	fab3 f383 	clz	r3, r3
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	461a      	mov	r2, r3
 80012ac:	2300      	movs	r3, #0
 80012ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b0:	f7ff faae 	bl	8000810 <HAL_GetTick>
 80012b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012b8:	e00a      	b.n	80012d0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ba:	f7ff faa9 	bl	8000810 <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d902      	bls.n	80012d0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	f000 bd5a 	b.w	8001d84 <HAL_RCC_OscConfig+0x106c>
 80012d0:	2302      	movs	r3, #2
 80012d2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80012da:	fa93 f3a3 	rbit	r3, r3
 80012de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80012e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e6:	fab3 f383 	clz	r3, r3
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	095b      	lsrs	r3, r3, #5
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d104      	bne.n	8001304 <HAL_RCC_OscConfig+0x5ec>
 80012fa:	4b01      	ldr	r3, [pc, #4]	; (8001300 <HAL_RCC_OscConfig+0x5e8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	e015      	b.n	800132c <HAL_RCC_OscConfig+0x614>
 8001300:	40021000 	.word	0x40021000
 8001304:	2302      	movs	r3, #2
 8001306:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800130e:	fa93 f3a3 	rbit	r3, r3
 8001312:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001316:	2302      	movs	r3, #2
 8001318:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800131c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001320:	fa93 f3a3 	rbit	r3, r3
 8001324:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001328:	4bc8      	ldr	r3, [pc, #800]	; (800164c <HAL_RCC_OscConfig+0x934>)
 800132a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132c:	2202      	movs	r2, #2
 800132e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001332:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001336:	fa92 f2a2 	rbit	r2, r2
 800133a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800133e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001342:	fab2 f282 	clz	r2, r2
 8001346:	b2d2      	uxtb	r2, r2
 8001348:	f042 0220 	orr.w	r2, r2, #32
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	f002 021f 	and.w	r2, r2, #31
 8001352:	2101      	movs	r1, #1
 8001354:	fa01 f202 	lsl.w	r2, r1, r2
 8001358:	4013      	ands	r3, r2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1ad      	bne.n	80012ba <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800135e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001362:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 8110 	beq.w	8001594 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001378:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d079      	beq.n	8001478 <HAL_RCC_OscConfig+0x760>
 8001384:	2301      	movs	r3, #1
 8001386:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800138e:	fa93 f3a3 	rbit	r3, r3
 8001392:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001396:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800139a:	fab3 f383 	clz	r3, r3
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	461a      	mov	r2, r3
 80013a2:	4bab      	ldr	r3, [pc, #684]	; (8001650 <HAL_RCC_OscConfig+0x938>)
 80013a4:	4413      	add	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	461a      	mov	r2, r3
 80013aa:	2301      	movs	r3, #1
 80013ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ae:	f7ff fa2f 	bl	8000810 <HAL_GetTick>
 80013b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b6:	e00a      	b.n	80013ce <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013b8:	f7ff fa2a 	bl	8000810 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d902      	bls.n	80013ce <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	f000 bcdb 	b.w	8001d84 <HAL_RCC_OscConfig+0x106c>
 80013ce:	2302      	movs	r3, #2
 80013d0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80013d8:	fa93 f3a3 	rbit	r3, r3
 80013dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80013e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013e4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80013e8:	2202      	movs	r2, #2
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	fa93 f2a3 	rbit	r2, r3
 80013fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001408:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800140c:	2202      	movs	r2, #2
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001414:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	fa93 f2a3 	rbit	r2, r3
 800141e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001422:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001426:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001428:	4b88      	ldr	r3, [pc, #544]	; (800164c <HAL_RCC_OscConfig+0x934>)
 800142a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800142c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001430:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001434:	2102      	movs	r1, #2
 8001436:	6019      	str	r1, [r3, #0]
 8001438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800143c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	fa93 f1a3 	rbit	r1, r3
 8001446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800144a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800144e:	6019      	str	r1, [r3, #0]
  return result;
 8001450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001454:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	fab3 f383 	clz	r3, r3
 800145e:	b2db      	uxtb	r3, r3
 8001460:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001464:	b2db      	uxtb	r3, r3
 8001466:	f003 031f 	and.w	r3, r3, #31
 800146a:	2101      	movs	r1, #1
 800146c:	fa01 f303 	lsl.w	r3, r1, r3
 8001470:	4013      	ands	r3, r2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0a0      	beq.n	80013b8 <HAL_RCC_OscConfig+0x6a0>
 8001476:	e08d      	b.n	8001594 <HAL_RCC_OscConfig+0x87c>
 8001478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800147c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001480:	2201      	movs	r2, #1
 8001482:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001488:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	fa93 f2a3 	rbit	r2, r3
 8001492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001496:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800149a:	601a      	str	r2, [r3, #0]
  return result;
 800149c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014a4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014a6:	fab3 f383 	clz	r3, r3
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b68      	ldr	r3, [pc, #416]	; (8001650 <HAL_RCC_OscConfig+0x938>)
 80014b0:	4413      	add	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	461a      	mov	r2, r3
 80014b6:	2300      	movs	r3, #0
 80014b8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ba:	f7ff f9a9 	bl	8000810 <HAL_GetTick>
 80014be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c2:	e00a      	b.n	80014da <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c4:	f7ff f9a4 	bl	8000810 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d902      	bls.n	80014da <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	f000 bc55 	b.w	8001d84 <HAL_RCC_OscConfig+0x106c>
 80014da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014de:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014e2:	2202      	movs	r2, #2
 80014e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ea:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	fa93 f2a3 	rbit	r2, r3
 80014f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001502:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001506:	2202      	movs	r2, #2
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800150e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	fa93 f2a3 	rbit	r2, r3
 8001518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800151c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001526:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800152a:	2202      	movs	r2, #2
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001532:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	fa93 f2a3 	rbit	r2, r3
 800153c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001540:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001544:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001546:	4b41      	ldr	r3, [pc, #260]	; (800164c <HAL_RCC_OscConfig+0x934>)
 8001548:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800154a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800154e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001552:	2102      	movs	r1, #2
 8001554:	6019      	str	r1, [r3, #0]
 8001556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800155a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	fa93 f1a3 	rbit	r1, r3
 8001564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001568:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800156c:	6019      	str	r1, [r3, #0]
  return result;
 800156e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001572:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	fab3 f383 	clz	r3, r3
 800157c:	b2db      	uxtb	r3, r3
 800157e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001582:	b2db      	uxtb	r3, r3
 8001584:	f003 031f 	and.w	r3, r3, #31
 8001588:	2101      	movs	r1, #1
 800158a:	fa01 f303 	lsl.w	r3, r1, r3
 800158e:	4013      	ands	r3, r2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d197      	bne.n	80014c4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001598:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f000 81a1 	beq.w	80018ec <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015aa:	2300      	movs	r3, #0
 80015ac:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015b0:	4b26      	ldr	r3, [pc, #152]	; (800164c <HAL_RCC_OscConfig+0x934>)
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d116      	bne.n	80015ea <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015bc:	4b23      	ldr	r3, [pc, #140]	; (800164c <HAL_RCC_OscConfig+0x934>)
 80015be:	69db      	ldr	r3, [r3, #28]
 80015c0:	4a22      	ldr	r2, [pc, #136]	; (800164c <HAL_RCC_OscConfig+0x934>)
 80015c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c6:	61d3      	str	r3, [r2, #28]
 80015c8:	4b20      	ldr	r3, [pc, #128]	; (800164c <HAL_RCC_OscConfig+0x934>)
 80015ca:	69db      	ldr	r3, [r3, #28]
 80015cc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80015d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015de:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80015e2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80015e4:	2301      	movs	r3, #1
 80015e6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ea:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <HAL_RCC_OscConfig+0x93c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d11a      	bne.n	800162c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015f6:	4b17      	ldr	r3, [pc, #92]	; (8001654 <HAL_RCC_OscConfig+0x93c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a16      	ldr	r2, [pc, #88]	; (8001654 <HAL_RCC_OscConfig+0x93c>)
 80015fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001600:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001602:	f7ff f905 	bl	8000810 <HAL_GetTick>
 8001606:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160a:	e009      	b.n	8001620 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800160c:	f7ff f900 	bl	8000810 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b64      	cmp	r3, #100	; 0x64
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e3b1      	b.n	8001d84 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <HAL_RCC_OscConfig+0x93c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0ef      	beq.n	800160c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800162c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001630:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d10d      	bne.n	8001658 <HAL_RCC_OscConfig+0x940>
 800163c:	4b03      	ldr	r3, [pc, #12]	; (800164c <HAL_RCC_OscConfig+0x934>)
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	4a02      	ldr	r2, [pc, #8]	; (800164c <HAL_RCC_OscConfig+0x934>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	6213      	str	r3, [r2, #32]
 8001648:	e03c      	b.n	80016c4 <HAL_RCC_OscConfig+0x9ac>
 800164a:	bf00      	nop
 800164c:	40021000 	.word	0x40021000
 8001650:	10908120 	.word	0x10908120
 8001654:	40007000 	.word	0x40007000
 8001658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800165c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d10c      	bne.n	8001682 <HAL_RCC_OscConfig+0x96a>
 8001668:	4bc1      	ldr	r3, [pc, #772]	; (8001970 <HAL_RCC_OscConfig+0xc58>)
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	4ac0      	ldr	r2, [pc, #768]	; (8001970 <HAL_RCC_OscConfig+0xc58>)
 800166e:	f023 0301 	bic.w	r3, r3, #1
 8001672:	6213      	str	r3, [r2, #32]
 8001674:	4bbe      	ldr	r3, [pc, #760]	; (8001970 <HAL_RCC_OscConfig+0xc58>)
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	4abd      	ldr	r2, [pc, #756]	; (8001970 <HAL_RCC_OscConfig+0xc58>)
 800167a:	f023 0304 	bic.w	r3, r3, #4
 800167e:	6213      	str	r3, [r2, #32]
 8001680:	e020      	b.n	80016c4 <HAL_RCC_OscConfig+0x9ac>
 8001682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001686:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	2b05      	cmp	r3, #5
 8001690:	d10c      	bne.n	80016ac <HAL_RCC_OscConfig+0x994>
 8001692:	4bb7      	ldr	r3, [pc, #732]	; (8001970 <HAL_RCC_OscConfig+0xc58>)
 8001694:	6a1b      	ldr	r3, [r3, #32]
 8001696:	4ab6      	ldr	r2, [pc, #728]	; (8001970 <HAL_RCC_OscConfig+0xc58>)
 8001698:	f043 0304 	orr.w	r3, r3, #4
 800169c:	6213      	str	r3, [r2, #32]
 800169e:	4bb4      	ldr	r3, [pc, #720]	; (8001970 <HAL_RCC_OscConfig+0xc58>)
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	4ab3      	ldr	r2, [pc, #716]	; (8001970 <HAL_RCC_OscConfig+0xc58>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6213      	str	r3, [r2, #32]
 80016aa:	e00b      	b.n	80016c4 <HAL_RCC_OscConfig+0x9ac>
 80016ac:	4bb0      	ldr	r3, [pc, #704]	; (8001970 <HAL_RCC_OscConfig+0xc58>)
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	4aaf      	ldr	r2, [pc, #700]	; (8001970 <HAL_RCC_OscConfig+0xc58>)
 80016b2:	f023 0301 	bic.w	r3, r3, #1
 80016b6:	6213      	str	r3, [r2, #32]
 80016b8:	4bad      	ldr	r3, [pc, #692]	; (8001970 <HAL_RCC_OscConfig+0xc58>)
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	4aac      	ldr	r2, [pc, #688]	; (8001970 <HAL_RCC_OscConfig+0xc58>)
 80016be:	f023 0304 	bic.w	r3, r3, #4
 80016c2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 8081 	beq.w	80017d8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d6:	f7ff f89b 	bl	8000810 <HAL_GetTick>
 80016da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016de:	e00b      	b.n	80016f8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016e0:	f7ff f896 	bl	8000810 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e345      	b.n	8001d84 <HAL_RCC_OscConfig+0x106c>
 80016f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001700:	2202      	movs	r2, #2
 8001702:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001708:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	fa93 f2a3 	rbit	r2, r3
 8001712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001716:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001720:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001724:	2202      	movs	r2, #2
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800172c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	fa93 f2a3 	rbit	r2, r3
 8001736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800173a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800173e:	601a      	str	r2, [r3, #0]
  return result;
 8001740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001744:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001748:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800174a:	fab3 f383 	clz	r3, r3
 800174e:	b2db      	uxtb	r3, r3
 8001750:	095b      	lsrs	r3, r3, #5
 8001752:	b2db      	uxtb	r3, r3
 8001754:	f043 0302 	orr.w	r3, r3, #2
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d102      	bne.n	8001764 <HAL_RCC_OscConfig+0xa4c>
 800175e:	4b84      	ldr	r3, [pc, #528]	; (8001970 <HAL_RCC_OscConfig+0xc58>)
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	e013      	b.n	800178c <HAL_RCC_OscConfig+0xa74>
 8001764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001768:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800176c:	2202      	movs	r2, #2
 800176e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001774:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	fa93 f2a3 	rbit	r2, r3
 800177e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001782:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	4b79      	ldr	r3, [pc, #484]	; (8001970 <HAL_RCC_OscConfig+0xc58>)
 800178a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001790:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001794:	2102      	movs	r1, #2
 8001796:	6011      	str	r1, [r2, #0]
 8001798:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800179c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80017a0:	6812      	ldr	r2, [r2, #0]
 80017a2:	fa92 f1a2 	rbit	r1, r2
 80017a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017aa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017ae:	6011      	str	r1, [r2, #0]
  return result;
 80017b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017b4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	fab2 f282 	clz	r2, r2
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	f002 021f 	and.w	r2, r2, #31
 80017ca:	2101      	movs	r1, #1
 80017cc:	fa01 f202 	lsl.w	r2, r1, r2
 80017d0:	4013      	ands	r3, r2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d084      	beq.n	80016e0 <HAL_RCC_OscConfig+0x9c8>
 80017d6:	e07f      	b.n	80018d8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d8:	f7ff f81a 	bl	8000810 <HAL_GetTick>
 80017dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e0:	e00b      	b.n	80017fa <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017e2:	f7ff f815 	bl	8000810 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e2c4      	b.n	8001d84 <HAL_RCC_OscConfig+0x106c>
 80017fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017fe:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001802:	2202      	movs	r2, #2
 8001804:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800180a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	fa93 f2a3 	rbit	r2, r3
 8001814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001818:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001822:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001826:	2202      	movs	r2, #2
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800182e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	fa93 f2a3 	rbit	r2, r3
 8001838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800183c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001840:	601a      	str	r2, [r3, #0]
  return result;
 8001842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001846:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800184a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800184c:	fab3 f383 	clz	r3, r3
 8001850:	b2db      	uxtb	r3, r3
 8001852:	095b      	lsrs	r3, r3, #5
 8001854:	b2db      	uxtb	r3, r3
 8001856:	f043 0302 	orr.w	r3, r3, #2
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d102      	bne.n	8001866 <HAL_RCC_OscConfig+0xb4e>
 8001860:	4b43      	ldr	r3, [pc, #268]	; (8001970 <HAL_RCC_OscConfig+0xc58>)
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	e013      	b.n	800188e <HAL_RCC_OscConfig+0xb76>
 8001866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800186a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800186e:	2202      	movs	r2, #2
 8001870:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001876:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	fa93 f2a3 	rbit	r2, r3
 8001880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001884:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	4b39      	ldr	r3, [pc, #228]	; (8001970 <HAL_RCC_OscConfig+0xc58>)
 800188c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001892:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001896:	2102      	movs	r1, #2
 8001898:	6011      	str	r1, [r2, #0]
 800189a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800189e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80018a2:	6812      	ldr	r2, [r2, #0]
 80018a4:	fa92 f1a2 	rbit	r1, r2
 80018a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018ac:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018b0:	6011      	str	r1, [r2, #0]
  return result;
 80018b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018b6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018ba:	6812      	ldr	r2, [r2, #0]
 80018bc:	fab2 f282 	clz	r2, r2
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	f002 021f 	and.w	r2, r2, #31
 80018cc:	2101      	movs	r1, #1
 80018ce:	fa01 f202 	lsl.w	r2, r1, r2
 80018d2:	4013      	ands	r3, r2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d184      	bne.n	80017e2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018d8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d105      	bne.n	80018ec <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018e0:	4b23      	ldr	r3, [pc, #140]	; (8001970 <HAL_RCC_OscConfig+0xc58>)
 80018e2:	69db      	ldr	r3, [r3, #28]
 80018e4:	4a22      	ldr	r2, [pc, #136]	; (8001970 <HAL_RCC_OscConfig+0xc58>)
 80018e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018ea:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	69db      	ldr	r3, [r3, #28]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f000 8242 	beq.w	8001d82 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018fe:	4b1c      	ldr	r3, [pc, #112]	; (8001970 <HAL_RCC_OscConfig+0xc58>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f003 030c 	and.w	r3, r3, #12
 8001906:	2b08      	cmp	r3, #8
 8001908:	f000 8213 	beq.w	8001d32 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800190c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001910:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	2b02      	cmp	r3, #2
 800191a:	f040 8162 	bne.w	8001be2 <HAL_RCC_OscConfig+0xeca>
 800191e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001922:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001926:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800192a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001930:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	fa93 f2a3 	rbit	r2, r3
 800193a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001942:	601a      	str	r2, [r3, #0]
  return result;
 8001944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001948:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800194c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194e:	fab3 f383 	clz	r3, r3
 8001952:	b2db      	uxtb	r3, r3
 8001954:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001958:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	461a      	mov	r2, r3
 8001960:	2300      	movs	r3, #0
 8001962:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001964:	f7fe ff54 	bl	8000810 <HAL_GetTick>
 8001968:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800196c:	e00c      	b.n	8001988 <HAL_RCC_OscConfig+0xc70>
 800196e:	bf00      	nop
 8001970:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001974:	f7fe ff4c 	bl	8000810 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e1fd      	b.n	8001d84 <HAL_RCC_OscConfig+0x106c>
 8001988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001990:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001994:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	fa93 f2a3 	rbit	r2, r3
 80019a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019ac:	601a      	str	r2, [r3, #0]
  return result;
 80019ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019b6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b8:	fab3 f383 	clz	r3, r3
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	095b      	lsrs	r3, r3, #5
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d102      	bne.n	80019d2 <HAL_RCC_OscConfig+0xcba>
 80019cc:	4bb0      	ldr	r3, [pc, #704]	; (8001c90 <HAL_RCC_OscConfig+0xf78>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	e027      	b.n	8001a22 <HAL_RCC_OscConfig+0xd0a>
 80019d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80019da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	fa93 f2a3 	rbit	r2, r3
 80019ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	fa93 f2a3 	rbit	r2, r3
 8001a14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a18:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	4b9c      	ldr	r3, [pc, #624]	; (8001c90 <HAL_RCC_OscConfig+0xf78>)
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a26:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a2a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a2e:	6011      	str	r1, [r2, #0]
 8001a30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a34:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a38:	6812      	ldr	r2, [r2, #0]
 8001a3a:	fa92 f1a2 	rbit	r1, r2
 8001a3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a42:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a46:	6011      	str	r1, [r2, #0]
  return result;
 8001a48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a4c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a50:	6812      	ldr	r2, [r2, #0]
 8001a52:	fab2 f282 	clz	r2, r2
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	f042 0220 	orr.w	r2, r2, #32
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	f002 021f 	and.w	r2, r2, #31
 8001a62:	2101      	movs	r1, #1
 8001a64:	fa01 f202 	lsl.w	r2, r1, r2
 8001a68:	4013      	ands	r3, r2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d182      	bne.n	8001974 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a6e:	4b88      	ldr	r3, [pc, #544]	; (8001c90 <HAL_RCC_OscConfig+0xf78>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
 8001a8e:	430b      	orrs	r3, r1
 8001a90:	497f      	ldr	r1, [pc, #508]	; (8001c90 <HAL_RCC_OscConfig+0xf78>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	604b      	str	r3, [r1, #4]
 8001a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001aa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	fa93 f2a3 	rbit	r2, r3
 8001ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001aba:	601a      	str	r2, [r3, #0]
  return result;
 8001abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001ac4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ac6:	fab3 f383 	clz	r3, r3
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ad0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	2301      	movs	r3, #1
 8001ada:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001adc:	f7fe fe98 	bl	8000810 <HAL_GetTick>
 8001ae0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ae4:	e009      	b.n	8001afa <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae6:	f7fe fe93 	bl	8000810 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e144      	b.n	8001d84 <HAL_RCC_OscConfig+0x106c>
 8001afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afe:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	fa93 f2a3 	rbit	r2, r3
 8001b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b1e:	601a      	str	r2, [r3, #0]
  return result;
 8001b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b24:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b28:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b2a:	fab3 f383 	clz	r3, r3
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	095b      	lsrs	r3, r3, #5
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d102      	bne.n	8001b44 <HAL_RCC_OscConfig+0xe2c>
 8001b3e:	4b54      	ldr	r3, [pc, #336]	; (8001c90 <HAL_RCC_OscConfig+0xf78>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	e027      	b.n	8001b94 <HAL_RCC_OscConfig+0xe7c>
 8001b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b48:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b56:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	fa93 f2a3 	rbit	r2, r3
 8001b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b64:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	fa93 f2a3 	rbit	r2, r3
 8001b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	4b3f      	ldr	r3, [pc, #252]	; (8001c90 <HAL_RCC_OscConfig+0xf78>)
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b98:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b9c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ba0:	6011      	str	r1, [r2, #0]
 8001ba2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ba6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001baa:	6812      	ldr	r2, [r2, #0]
 8001bac:	fa92 f1a2 	rbit	r1, r2
 8001bb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bb4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001bb8:	6011      	str	r1, [r2, #0]
  return result;
 8001bba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bbe:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001bc2:	6812      	ldr	r2, [r2, #0]
 8001bc4:	fab2 f282 	clz	r2, r2
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	f042 0220 	orr.w	r2, r2, #32
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	f002 021f 	and.w	r2, r2, #31
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bda:	4013      	ands	r3, r2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d082      	beq.n	8001ae6 <HAL_RCC_OscConfig+0xdce>
 8001be0:	e0cf      	b.n	8001d82 <HAL_RCC_OscConfig+0x106a>
 8001be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001bea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	fa93 f2a3 	rbit	r2, r3
 8001bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c02:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c06:	601a      	str	r2, [r3, #0]
  return result;
 8001c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c10:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c12:	fab3 f383 	clz	r3, r3
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	461a      	mov	r2, r3
 8001c24:	2300      	movs	r3, #0
 8001c26:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c28:	f7fe fdf2 	bl	8000810 <HAL_GetTick>
 8001c2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c30:	e009      	b.n	8001c46 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c32:	f7fe fded 	bl	8000810 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e09e      	b.n	8001d84 <HAL_RCC_OscConfig+0x106c>
 8001c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c58:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	fa93 f2a3 	rbit	r2, r3
 8001c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c66:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c6a:	601a      	str	r2, [r3, #0]
  return result;
 8001c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c70:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c76:	fab3 f383 	clz	r3, r3
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	095b      	lsrs	r3, r3, #5
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d104      	bne.n	8001c94 <HAL_RCC_OscConfig+0xf7c>
 8001c8a:	4b01      	ldr	r3, [pc, #4]	; (8001c90 <HAL_RCC_OscConfig+0xf78>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	e029      	b.n	8001ce4 <HAL_RCC_OscConfig+0xfcc>
 8001c90:	40021000 	.word	0x40021000
 8001c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c98:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ca0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	fa93 f2a3 	rbit	r2, r3
 8001cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cbe:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001cc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ccc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	fa93 f2a3 	rbit	r2, r3
 8001cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cda:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	4b2b      	ldr	r3, [pc, #172]	; (8001d90 <HAL_RCC_OscConfig+0x1078>)
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ce8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001cec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cf0:	6011      	str	r1, [r2, #0]
 8001cf2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cf6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	fa92 f1a2 	rbit	r1, r2
 8001d00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d04:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d08:	6011      	str	r1, [r2, #0]
  return result;
 8001d0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d0e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d12:	6812      	ldr	r2, [r2, #0]
 8001d14:	fab2 f282 	clz	r2, r2
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	f042 0220 	orr.w	r2, r2, #32
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	f002 021f 	and.w	r2, r2, #31
 8001d24:	2101      	movs	r1, #1
 8001d26:	fa01 f202 	lsl.w	r2, r1, r2
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d180      	bne.n	8001c32 <HAL_RCC_OscConfig+0xf1a>
 8001d30:	e027      	b.n	8001d82 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d101      	bne.n	8001d46 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e01e      	b.n	8001d84 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d46:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <HAL_RCC_OscConfig+0x1078>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d4e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d52:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d10b      	bne.n	8001d7e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001d66:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d001      	beq.n	8001d82 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e000      	b.n	8001d84 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40021000 	.word	0x40021000

08001d94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b09e      	sub	sp, #120	; 0x78
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e162      	b.n	8002072 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dac:	4b90      	ldr	r3, [pc, #576]	; (8001ff0 <HAL_RCC_ClockConfig+0x25c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d910      	bls.n	8001ddc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dba:	4b8d      	ldr	r3, [pc, #564]	; (8001ff0 <HAL_RCC_ClockConfig+0x25c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f023 0207 	bic.w	r2, r3, #7
 8001dc2:	498b      	ldr	r1, [pc, #556]	; (8001ff0 <HAL_RCC_ClockConfig+0x25c>)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dca:	4b89      	ldr	r3, [pc, #548]	; (8001ff0 <HAL_RCC_ClockConfig+0x25c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d001      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e14a      	b.n	8002072 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d008      	beq.n	8001dfa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de8:	4b82      	ldr	r3, [pc, #520]	; (8001ff4 <HAL_RCC_ClockConfig+0x260>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	497f      	ldr	r1, [pc, #508]	; (8001ff4 <HAL_RCC_ClockConfig+0x260>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 80dc 	beq.w	8001fc0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d13c      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xf6>
 8001e10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e14:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e18:	fa93 f3a3 	rbit	r3, r3
 8001e1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e20:	fab3 f383 	clz	r3, r3
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	095b      	lsrs	r3, r3, #5
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d102      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xa6>
 8001e34:	4b6f      	ldr	r3, [pc, #444]	; (8001ff4 <HAL_RCC_ClockConfig+0x260>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	e00f      	b.n	8001e5a <HAL_RCC_ClockConfig+0xc6>
 8001e3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e3e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e42:	fa93 f3a3 	rbit	r3, r3
 8001e46:	667b      	str	r3, [r7, #100]	; 0x64
 8001e48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e4c:	663b      	str	r3, [r7, #96]	; 0x60
 8001e4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e50:	fa93 f3a3 	rbit	r3, r3
 8001e54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e56:	4b67      	ldr	r3, [pc, #412]	; (8001ff4 <HAL_RCC_ClockConfig+0x260>)
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e5e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e62:	fa92 f2a2 	rbit	r2, r2
 8001e66:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e6a:	fab2 f282 	clz	r2, r2
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	f042 0220 	orr.w	r2, r2, #32
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	f002 021f 	and.w	r2, r2, #31
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e80:	4013      	ands	r3, r2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d17b      	bne.n	8001f7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e0f3      	b.n	8002072 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d13c      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x178>
 8001e92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e96:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e9a:	fa93 f3a3 	rbit	r3, r3
 8001e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea2:	fab3 f383 	clz	r3, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	095b      	lsrs	r3, r3, #5
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d102      	bne.n	8001ebc <HAL_RCC_ClockConfig+0x128>
 8001eb6:	4b4f      	ldr	r3, [pc, #316]	; (8001ff4 <HAL_RCC_ClockConfig+0x260>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	e00f      	b.n	8001edc <HAL_RCC_ClockConfig+0x148>
 8001ebc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ec0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ec4:	fa93 f3a3 	rbit	r3, r3
 8001ec8:	647b      	str	r3, [r7, #68]	; 0x44
 8001eca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ece:	643b      	str	r3, [r7, #64]	; 0x40
 8001ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ed2:	fa93 f3a3 	rbit	r3, r3
 8001ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ed8:	4b46      	ldr	r3, [pc, #280]	; (8001ff4 <HAL_RCC_ClockConfig+0x260>)
 8001eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001edc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ee0:	63ba      	str	r2, [r7, #56]	; 0x38
 8001ee2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ee4:	fa92 f2a2 	rbit	r2, r2
 8001ee8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001eea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001eec:	fab2 f282 	clz	r2, r2
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	f042 0220 	orr.w	r2, r2, #32
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	f002 021f 	and.w	r2, r2, #31
 8001efc:	2101      	movs	r1, #1
 8001efe:	fa01 f202 	lsl.w	r2, r1, r2
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d13a      	bne.n	8001f7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0b2      	b.n	8002072 <HAL_RCC_ClockConfig+0x2de>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f12:	fa93 f3a3 	rbit	r3, r3
 8001f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1a:	fab3 f383 	clz	r3, r3
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	095b      	lsrs	r3, r3, #5
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d102      	bne.n	8001f34 <HAL_RCC_ClockConfig+0x1a0>
 8001f2e:	4b31      	ldr	r3, [pc, #196]	; (8001ff4 <HAL_RCC_ClockConfig+0x260>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	e00d      	b.n	8001f50 <HAL_RCC_ClockConfig+0x1bc>
 8001f34:	2302      	movs	r3, #2
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f3a:	fa93 f3a3 	rbit	r3, r3
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f40:	2302      	movs	r3, #2
 8001f42:	623b      	str	r3, [r7, #32]
 8001f44:	6a3b      	ldr	r3, [r7, #32]
 8001f46:	fa93 f3a3 	rbit	r3, r3
 8001f4a:	61fb      	str	r3, [r7, #28]
 8001f4c:	4b29      	ldr	r3, [pc, #164]	; (8001ff4 <HAL_RCC_ClockConfig+0x260>)
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f50:	2202      	movs	r2, #2
 8001f52:	61ba      	str	r2, [r7, #24]
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	fa92 f2a2 	rbit	r2, r2
 8001f5a:	617a      	str	r2, [r7, #20]
  return result;
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	fab2 f282 	clz	r2, r2
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	f042 0220 	orr.w	r2, r2, #32
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	f002 021f 	and.w	r2, r2, #31
 8001f6e:	2101      	movs	r1, #1
 8001f70:	fa01 f202 	lsl.w	r2, r1, r2
 8001f74:	4013      	ands	r3, r2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e079      	b.n	8002072 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f7e:	4b1d      	ldr	r3, [pc, #116]	; (8001ff4 <HAL_RCC_ClockConfig+0x260>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f023 0203 	bic.w	r2, r3, #3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	491a      	ldr	r1, [pc, #104]	; (8001ff4 <HAL_RCC_ClockConfig+0x260>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f90:	f7fe fc3e 	bl	8000810 <HAL_GetTick>
 8001f94:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f96:	e00a      	b.n	8001fae <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f98:	f7fe fc3a 	bl	8000810 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e061      	b.n	8002072 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fae:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <HAL_RCC_ClockConfig+0x260>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f003 020c 	and.w	r2, r3, #12
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d1eb      	bne.n	8001f98 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <HAL_RCC_ClockConfig+0x25c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d214      	bcs.n	8001ff8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fce:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <HAL_RCC_ClockConfig+0x25c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f023 0207 	bic.w	r2, r3, #7
 8001fd6:	4906      	ldr	r1, [pc, #24]	; (8001ff0 <HAL_RCC_ClockConfig+0x25c>)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fde:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <HAL_RCC_ClockConfig+0x25c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d005      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e040      	b.n	8002072 <HAL_RCC_ClockConfig+0x2de>
 8001ff0:	40022000 	.word	0x40022000
 8001ff4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b00      	cmp	r3, #0
 8002002:	d008      	beq.n	8002016 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002004:	4b1d      	ldr	r3, [pc, #116]	; (800207c <HAL_RCC_ClockConfig+0x2e8>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	491a      	ldr	r1, [pc, #104]	; (800207c <HAL_RCC_ClockConfig+0x2e8>)
 8002012:	4313      	orrs	r3, r2
 8002014:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b00      	cmp	r3, #0
 8002020:	d009      	beq.n	8002036 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002022:	4b16      	ldr	r3, [pc, #88]	; (800207c <HAL_RCC_ClockConfig+0x2e8>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	4912      	ldr	r1, [pc, #72]	; (800207c <HAL_RCC_ClockConfig+0x2e8>)
 8002032:	4313      	orrs	r3, r2
 8002034:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002036:	f000 f829 	bl	800208c <HAL_RCC_GetSysClockFreq>
 800203a:	4601      	mov	r1, r0
 800203c:	4b0f      	ldr	r3, [pc, #60]	; (800207c <HAL_RCC_ClockConfig+0x2e8>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002044:	22f0      	movs	r2, #240	; 0xf0
 8002046:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	fa92 f2a2 	rbit	r2, r2
 800204e:	60fa      	str	r2, [r7, #12]
  return result;
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	fab2 f282 	clz	r2, r2
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	40d3      	lsrs	r3, r2
 800205a:	4a09      	ldr	r2, [pc, #36]	; (8002080 <HAL_RCC_ClockConfig+0x2ec>)
 800205c:	5cd3      	ldrb	r3, [r2, r3]
 800205e:	fa21 f303 	lsr.w	r3, r1, r3
 8002062:	4a08      	ldr	r2, [pc, #32]	; (8002084 <HAL_RCC_ClockConfig+0x2f0>)
 8002064:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002066:	4b08      	ldr	r3, [pc, #32]	; (8002088 <HAL_RCC_ClockConfig+0x2f4>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe fb8c 	bl	8000788 <HAL_InitTick>
  
  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3778      	adds	r7, #120	; 0x78
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40021000 	.word	0x40021000
 8002080:	08003844 	.word	0x08003844
 8002084:	20000000 	.word	0x20000000
 8002088:	20000004 	.word	0x20000004

0800208c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800208c:	b480      	push	{r7}
 800208e:	b08b      	sub	sp, #44	; 0x2c
 8002090:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
 8002096:	2300      	movs	r3, #0
 8002098:	61bb      	str	r3, [r7, #24]
 800209a:	2300      	movs	r3, #0
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80020a6:	4b29      	ldr	r3, [pc, #164]	; (800214c <HAL_RCC_GetSysClockFreq+0xc0>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f003 030c 	and.w	r3, r3, #12
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d002      	beq.n	80020bc <HAL_RCC_GetSysClockFreq+0x30>
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d003      	beq.n	80020c2 <HAL_RCC_GetSysClockFreq+0x36>
 80020ba:	e03c      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020bc:	4b24      	ldr	r3, [pc, #144]	; (8002150 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020be:	623b      	str	r3, [r7, #32]
      break;
 80020c0:	e03c      	b.n	800213c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80020c8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80020cc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	fa92 f2a2 	rbit	r2, r2
 80020d4:	607a      	str	r2, [r7, #4]
  return result;
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	fab2 f282 	clz	r2, r2
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	40d3      	lsrs	r3, r2
 80020e0:	4a1c      	ldr	r2, [pc, #112]	; (8002154 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020e2:	5cd3      	ldrb	r3, [r2, r3]
 80020e4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80020e6:	4b19      	ldr	r3, [pc, #100]	; (800214c <HAL_RCC_GetSysClockFreq+0xc0>)
 80020e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	220f      	movs	r2, #15
 80020f0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	fa92 f2a2 	rbit	r2, r2
 80020f8:	60fa      	str	r2, [r7, #12]
  return result;
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	fab2 f282 	clz	r2, r2
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	40d3      	lsrs	r3, r2
 8002104:	4a14      	ldr	r2, [pc, #80]	; (8002158 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002106:	5cd3      	ldrb	r3, [r2, r3]
 8002108:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d008      	beq.n	8002126 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002114:	4a0e      	ldr	r2, [pc, #56]	; (8002150 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	fbb2 f2f3 	udiv	r2, r2, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	fb02 f303 	mul.w	r3, r2, r3
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
 8002124:	e004      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	4a0c      	ldr	r2, [pc, #48]	; (800215c <HAL_RCC_GetSysClockFreq+0xd0>)
 800212a:	fb02 f303 	mul.w	r3, r2, r3
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	623b      	str	r3, [r7, #32]
      break;
 8002134:	e002      	b.n	800213c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002138:	623b      	str	r3, [r7, #32]
      break;
 800213a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800213c:	6a3b      	ldr	r3, [r7, #32]
}
 800213e:	4618      	mov	r0, r3
 8002140:	372c      	adds	r7, #44	; 0x2c
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	40021000 	.word	0x40021000
 8002150:	007a1200 	.word	0x007a1200
 8002154:	0800385c 	.word	0x0800385c
 8002158:	0800386c 	.word	0x0800386c
 800215c:	003d0900 	.word	0x003d0900

08002160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002164:	4b03      	ldr	r3, [pc, #12]	; (8002174 <HAL_RCC_GetHCLKFreq+0x14>)
 8002166:	681b      	ldr	r3, [r3, #0]
}
 8002168:	4618      	mov	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	20000000 	.word	0x20000000

08002178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800217e:	f7ff ffef 	bl	8002160 <HAL_RCC_GetHCLKFreq>
 8002182:	4601      	mov	r1, r0
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800218c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002190:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	fa92 f2a2 	rbit	r2, r2
 8002198:	603a      	str	r2, [r7, #0]
  return result;
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	fab2 f282 	clz	r2, r2
 80021a0:	b2d2      	uxtb	r2, r2
 80021a2:	40d3      	lsrs	r3, r2
 80021a4:	4a04      	ldr	r2, [pc, #16]	; (80021b8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80021a6:	5cd3      	ldrb	r3, [r2, r3]
 80021a8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80021ac:	4618      	mov	r0, r3
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40021000 	.word	0x40021000
 80021b8:	08003854 	.word	0x08003854

080021bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80021c2:	f7ff ffcd 	bl	8002160 <HAL_RCC_GetHCLKFreq>
 80021c6:	4601      	mov	r1, r0
 80021c8:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80021d0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80021d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	fa92 f2a2 	rbit	r2, r2
 80021dc:	603a      	str	r2, [r7, #0]
  return result;
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	fab2 f282 	clz	r2, r2
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	40d3      	lsrs	r3, r2
 80021e8:	4a04      	ldr	r2, [pc, #16]	; (80021fc <HAL_RCC_GetPCLK2Freq+0x40>)
 80021ea:	5cd3      	ldrb	r3, [r2, r3]
 80021ec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40021000 	.word	0x40021000
 80021fc:	08003854 	.word	0x08003854

08002200 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b092      	sub	sp, #72	; 0x48
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002208:	2300      	movs	r3, #0
 800220a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800220c:	2300      	movs	r3, #0
 800220e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002210:	2300      	movs	r3, #0
 8002212:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 80d4 	beq.w	80023cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002224:	4b4e      	ldr	r3, [pc, #312]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002226:	69db      	ldr	r3, [r3, #28]
 8002228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10e      	bne.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002230:	4b4b      	ldr	r3, [pc, #300]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	4a4a      	ldr	r2, [pc, #296]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800223a:	61d3      	str	r3, [r2, #28]
 800223c:	4b48      	ldr	r3, [pc, #288]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002248:	2301      	movs	r3, #1
 800224a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224e:	4b45      	ldr	r3, [pc, #276]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002256:	2b00      	cmp	r3, #0
 8002258:	d118      	bne.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800225a:	4b42      	ldr	r3, [pc, #264]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a41      	ldr	r2, [pc, #260]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002264:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002266:	f7fe fad3 	bl	8000810 <HAL_GetTick>
 800226a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226c:	e008      	b.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800226e:	f7fe facf 	bl	8000810 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b64      	cmp	r3, #100	; 0x64
 800227a:	d901      	bls.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e169      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002280:	4b38      	ldr	r3, [pc, #224]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0f0      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800228c:	4b34      	ldr	r3, [pc, #208]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002294:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 8084 	beq.w	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d07c      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022ac:	4b2c      	ldr	r3, [pc, #176]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022be:	fa93 f3a3 	rbit	r3, r3
 80022c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80022c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022c6:	fab3 f383 	clz	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	461a      	mov	r2, r3
 80022ce:	4b26      	ldr	r3, [pc, #152]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022d0:	4413      	add	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	461a      	mov	r2, r3
 80022d6:	2301      	movs	r3, #1
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e2:	fa93 f3a3 	rbit	r3, r3
 80022e6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022ea:	fab3 f383 	clz	r3, r3
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	461a      	mov	r2, r3
 80022f2:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022f4:	4413      	add	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	461a      	mov	r2, r3
 80022fa:	2300      	movs	r3, #0
 80022fc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022fe:	4a18      	ldr	r2, [pc, #96]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002302:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b00      	cmp	r3, #0
 800230c:	d04b      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230e:	f7fe fa7f 	bl	8000810 <HAL_GetTick>
 8002312:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002314:	e00a      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002316:	f7fe fa7b 	bl	8000810 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	f241 3288 	movw	r2, #5000	; 0x1388
 8002324:	4293      	cmp	r3, r2
 8002326:	d901      	bls.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e113      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800232c:	2302      	movs	r3, #2
 800232e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002332:	fa93 f3a3 	rbit	r3, r3
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
 8002338:	2302      	movs	r3, #2
 800233a:	623b      	str	r3, [r7, #32]
 800233c:	6a3b      	ldr	r3, [r7, #32]
 800233e:	fa93 f3a3 	rbit	r3, r3
 8002342:	61fb      	str	r3, [r7, #28]
  return result;
 8002344:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002346:	fab3 f383 	clz	r3, r3
 800234a:	b2db      	uxtb	r3, r3
 800234c:	095b      	lsrs	r3, r3, #5
 800234e:	b2db      	uxtb	r3, r3
 8002350:	f043 0302 	orr.w	r3, r3, #2
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d108      	bne.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800235a:	4b01      	ldr	r3, [pc, #4]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	e00d      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002360:	40021000 	.word	0x40021000
 8002364:	40007000 	.word	0x40007000
 8002368:	10908100 	.word	0x10908100
 800236c:	2302      	movs	r3, #2
 800236e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	fa93 f3a3 	rbit	r3, r3
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	4b78      	ldr	r3, [pc, #480]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	2202      	movs	r2, #2
 800237e:	613a      	str	r2, [r7, #16]
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	fa92 f2a2 	rbit	r2, r2
 8002386:	60fa      	str	r2, [r7, #12]
  return result;
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	fab2 f282 	clz	r2, r2
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	f002 021f 	and.w	r2, r2, #31
 800239a:	2101      	movs	r1, #1
 800239c:	fa01 f202 	lsl.w	r2, r1, r2
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0b7      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80023a6:	4b6d      	ldr	r3, [pc, #436]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	496a      	ldr	r1, [pc, #424]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d105      	bne.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c0:	4b66      	ldr	r3, [pc, #408]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	4a65      	ldr	r2, [pc, #404]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d008      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023d8:	4b60      	ldr	r3, [pc, #384]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023dc:	f023 0203 	bic.w	r2, r3, #3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	495d      	ldr	r1, [pc, #372]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d008      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023f6:	4b59      	ldr	r3, [pc, #356]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	4956      	ldr	r1, [pc, #344]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002404:	4313      	orrs	r3, r2
 8002406:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	d008      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002414:	4b51      	ldr	r3, [pc, #324]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002418:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	494e      	ldr	r1, [pc, #312]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002422:	4313      	orrs	r3, r2
 8002424:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0320 	and.w	r3, r3, #32
 800242e:	2b00      	cmp	r3, #0
 8002430:	d008      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002432:	4b4a      	ldr	r3, [pc, #296]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	f023 0210 	bic.w	r2, r3, #16
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	4947      	ldr	r1, [pc, #284]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002440:	4313      	orrs	r3, r2
 8002442:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d008      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002450:	4b42      	ldr	r3, [pc, #264]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245c:	493f      	ldr	r1, [pc, #252]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800245e:	4313      	orrs	r3, r2
 8002460:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246a:	2b00      	cmp	r3, #0
 800246c:	d008      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800246e:	4b3b      	ldr	r3, [pc, #236]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	f023 0220 	bic.w	r2, r3, #32
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	4938      	ldr	r1, [pc, #224]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800247c:	4313      	orrs	r3, r2
 800247e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800248c:	4b33      	ldr	r3, [pc, #204]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002490:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	4930      	ldr	r1, [pc, #192]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800249a:	4313      	orrs	r3, r2
 800249c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d008      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024aa:	4b2c      	ldr	r3, [pc, #176]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	4929      	ldr	r1, [pc, #164]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d008      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024c8:	4b24      	ldr	r3, [pc, #144]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d4:	4921      	ldr	r1, [pc, #132]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d008      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80024e6:	4b1d      	ldr	r3, [pc, #116]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ea:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f2:	491a      	ldr	r1, [pc, #104]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002504:	4b15      	ldr	r3, [pc, #84]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002508:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002510:	4912      	ldr	r1, [pc, #72]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002512:	4313      	orrs	r3, r2
 8002514:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d008      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002522:	4b0e      	ldr	r3, [pc, #56]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	490b      	ldr	r1, [pc, #44]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002530:	4313      	orrs	r3, r2
 8002532:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d008      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254c:	4903      	ldr	r1, [pc, #12]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800254e:	4313      	orrs	r3, r2
 8002550:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3748      	adds	r7, #72	; 0x48
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40021000 	.word	0x40021000

08002560 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e040      	b.n	80025f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002576:	2b00      	cmp	r3, #0
 8002578:	d106      	bne.n	8002588 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7fe f80c 	bl	80005a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2224      	movs	r2, #36	; 0x24
 800258c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0201 	bic.w	r2, r2, #1
 800259c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f8c0 	bl	8002724 <UART_SetConfig>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d101      	bne.n	80025ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e022      	b.n	80025f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 fa8a 	bl	8002ad0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 0201 	orr.w	r2, r2, #1
 80025ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 fb11 	bl	8002c14 <UART_CheckIdleState>
 80025f2:	4603      	mov	r3, r0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08a      	sub	sp, #40	; 0x28
 8002600:	af02      	add	r7, sp, #8
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	4613      	mov	r3, r2
 800260a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002610:	2b20      	cmp	r3, #32
 8002612:	f040 8082 	bne.w	800271a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d002      	beq.n	8002622 <HAL_UART_Transmit+0x26>
 800261c:	88fb      	ldrh	r3, [r7, #6]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e07a      	b.n	800271c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800262c:	2b01      	cmp	r3, #1
 800262e:	d101      	bne.n	8002634 <HAL_UART_Transmit+0x38>
 8002630:	2302      	movs	r3, #2
 8002632:	e073      	b.n	800271c <HAL_UART_Transmit+0x120>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2221      	movs	r2, #33	; 0x21
 8002648:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800264a:	f7fe f8e1 	bl	8000810 <HAL_GetTick>
 800264e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	88fa      	ldrh	r2, [r7, #6]
 8002654:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	88fa      	ldrh	r2, [r7, #6]
 800265c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002668:	d108      	bne.n	800267c <HAL_UART_Transmit+0x80>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d104      	bne.n	800267c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002672:	2300      	movs	r3, #0
 8002674:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	61bb      	str	r3, [r7, #24]
 800267a:	e003      	b.n	8002684 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002680:	2300      	movs	r3, #0
 8002682:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800268c:	e02d      	b.n	80026ea <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2200      	movs	r2, #0
 8002696:	2180      	movs	r1, #128	; 0x80
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 fb04 	bl	8002ca6 <UART_WaitOnFlagUntilTimeout>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e039      	b.n	800271c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10b      	bne.n	80026c6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	881a      	ldrh	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026ba:	b292      	uxth	r2, r2
 80026bc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	3302      	adds	r3, #2
 80026c2:	61bb      	str	r3, [r7, #24]
 80026c4:	e008      	b.n	80026d8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	781a      	ldrb	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	b292      	uxth	r2, r2
 80026d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3301      	adds	r3, #1
 80026d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80026de:	b29b      	uxth	r3, r3
 80026e0:	3b01      	subs	r3, #1
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1cb      	bne.n	800268e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	2200      	movs	r2, #0
 80026fe:	2140      	movs	r1, #64	; 0x40
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 fad0 	bl	8002ca6 <UART_WaitOnFlagUntilTimeout>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e005      	b.n	800271c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2220      	movs	r2, #32
 8002714:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	e000      	b.n	800271c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800271a:	2302      	movs	r3, #2
  }
}
 800271c:	4618      	mov	r0, r3
 800271e:	3720      	adds	r7, #32
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b088      	sub	sp, #32
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	4313      	orrs	r3, r2
 8002746:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002752:	f023 030c 	bic.w	r3, r3, #12
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6812      	ldr	r2, [r2, #0]
 800275a:	6979      	ldr	r1, [r7, #20]
 800275c:	430b      	orrs	r3, r1
 800275e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	4313      	orrs	r3, r2
 8002784:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	430a      	orrs	r2, r1
 8002798:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4aa8      	ldr	r2, [pc, #672]	; (8002a40 <UART_SetConfig+0x31c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d120      	bne.n	80027e6 <UART_SetConfig+0xc2>
 80027a4:	4ba7      	ldr	r3, [pc, #668]	; (8002a44 <UART_SetConfig+0x320>)
 80027a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d817      	bhi.n	80027e0 <UART_SetConfig+0xbc>
 80027b0:	a201      	add	r2, pc, #4	; (adr r2, 80027b8 <UART_SetConfig+0x94>)
 80027b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b6:	bf00      	nop
 80027b8:	080027c9 	.word	0x080027c9
 80027bc:	080027d5 	.word	0x080027d5
 80027c0:	080027db 	.word	0x080027db
 80027c4:	080027cf 	.word	0x080027cf
 80027c8:	2301      	movs	r3, #1
 80027ca:	77fb      	strb	r3, [r7, #31]
 80027cc:	e0b5      	b.n	800293a <UART_SetConfig+0x216>
 80027ce:	2302      	movs	r3, #2
 80027d0:	77fb      	strb	r3, [r7, #31]
 80027d2:	e0b2      	b.n	800293a <UART_SetConfig+0x216>
 80027d4:	2304      	movs	r3, #4
 80027d6:	77fb      	strb	r3, [r7, #31]
 80027d8:	e0af      	b.n	800293a <UART_SetConfig+0x216>
 80027da:	2308      	movs	r3, #8
 80027dc:	77fb      	strb	r3, [r7, #31]
 80027de:	e0ac      	b.n	800293a <UART_SetConfig+0x216>
 80027e0:	2310      	movs	r3, #16
 80027e2:	77fb      	strb	r3, [r7, #31]
 80027e4:	e0a9      	b.n	800293a <UART_SetConfig+0x216>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a97      	ldr	r2, [pc, #604]	; (8002a48 <UART_SetConfig+0x324>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d124      	bne.n	800283a <UART_SetConfig+0x116>
 80027f0:	4b94      	ldr	r3, [pc, #592]	; (8002a44 <UART_SetConfig+0x320>)
 80027f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80027fc:	d011      	beq.n	8002822 <UART_SetConfig+0xfe>
 80027fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002802:	d817      	bhi.n	8002834 <UART_SetConfig+0x110>
 8002804:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002808:	d011      	beq.n	800282e <UART_SetConfig+0x10a>
 800280a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800280e:	d811      	bhi.n	8002834 <UART_SetConfig+0x110>
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <UART_SetConfig+0xf8>
 8002814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002818:	d006      	beq.n	8002828 <UART_SetConfig+0x104>
 800281a:	e00b      	b.n	8002834 <UART_SetConfig+0x110>
 800281c:	2300      	movs	r3, #0
 800281e:	77fb      	strb	r3, [r7, #31]
 8002820:	e08b      	b.n	800293a <UART_SetConfig+0x216>
 8002822:	2302      	movs	r3, #2
 8002824:	77fb      	strb	r3, [r7, #31]
 8002826:	e088      	b.n	800293a <UART_SetConfig+0x216>
 8002828:	2304      	movs	r3, #4
 800282a:	77fb      	strb	r3, [r7, #31]
 800282c:	e085      	b.n	800293a <UART_SetConfig+0x216>
 800282e:	2308      	movs	r3, #8
 8002830:	77fb      	strb	r3, [r7, #31]
 8002832:	e082      	b.n	800293a <UART_SetConfig+0x216>
 8002834:	2310      	movs	r3, #16
 8002836:	77fb      	strb	r3, [r7, #31]
 8002838:	e07f      	b.n	800293a <UART_SetConfig+0x216>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a83      	ldr	r2, [pc, #524]	; (8002a4c <UART_SetConfig+0x328>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d124      	bne.n	800288e <UART_SetConfig+0x16a>
 8002844:	4b7f      	ldr	r3, [pc, #508]	; (8002a44 <UART_SetConfig+0x320>)
 8002846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002848:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800284c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002850:	d011      	beq.n	8002876 <UART_SetConfig+0x152>
 8002852:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002856:	d817      	bhi.n	8002888 <UART_SetConfig+0x164>
 8002858:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800285c:	d011      	beq.n	8002882 <UART_SetConfig+0x15e>
 800285e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002862:	d811      	bhi.n	8002888 <UART_SetConfig+0x164>
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <UART_SetConfig+0x14c>
 8002868:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800286c:	d006      	beq.n	800287c <UART_SetConfig+0x158>
 800286e:	e00b      	b.n	8002888 <UART_SetConfig+0x164>
 8002870:	2300      	movs	r3, #0
 8002872:	77fb      	strb	r3, [r7, #31]
 8002874:	e061      	b.n	800293a <UART_SetConfig+0x216>
 8002876:	2302      	movs	r3, #2
 8002878:	77fb      	strb	r3, [r7, #31]
 800287a:	e05e      	b.n	800293a <UART_SetConfig+0x216>
 800287c:	2304      	movs	r3, #4
 800287e:	77fb      	strb	r3, [r7, #31]
 8002880:	e05b      	b.n	800293a <UART_SetConfig+0x216>
 8002882:	2308      	movs	r3, #8
 8002884:	77fb      	strb	r3, [r7, #31]
 8002886:	e058      	b.n	800293a <UART_SetConfig+0x216>
 8002888:	2310      	movs	r3, #16
 800288a:	77fb      	strb	r3, [r7, #31]
 800288c:	e055      	b.n	800293a <UART_SetConfig+0x216>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a6f      	ldr	r2, [pc, #444]	; (8002a50 <UART_SetConfig+0x32c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d124      	bne.n	80028e2 <UART_SetConfig+0x1be>
 8002898:	4b6a      	ldr	r3, [pc, #424]	; (8002a44 <UART_SetConfig+0x320>)
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80028a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80028a4:	d011      	beq.n	80028ca <UART_SetConfig+0x1a6>
 80028a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80028aa:	d817      	bhi.n	80028dc <UART_SetConfig+0x1b8>
 80028ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028b0:	d011      	beq.n	80028d6 <UART_SetConfig+0x1b2>
 80028b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028b6:	d811      	bhi.n	80028dc <UART_SetConfig+0x1b8>
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <UART_SetConfig+0x1a0>
 80028bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028c0:	d006      	beq.n	80028d0 <UART_SetConfig+0x1ac>
 80028c2:	e00b      	b.n	80028dc <UART_SetConfig+0x1b8>
 80028c4:	2300      	movs	r3, #0
 80028c6:	77fb      	strb	r3, [r7, #31]
 80028c8:	e037      	b.n	800293a <UART_SetConfig+0x216>
 80028ca:	2302      	movs	r3, #2
 80028cc:	77fb      	strb	r3, [r7, #31]
 80028ce:	e034      	b.n	800293a <UART_SetConfig+0x216>
 80028d0:	2304      	movs	r3, #4
 80028d2:	77fb      	strb	r3, [r7, #31]
 80028d4:	e031      	b.n	800293a <UART_SetConfig+0x216>
 80028d6:	2308      	movs	r3, #8
 80028d8:	77fb      	strb	r3, [r7, #31]
 80028da:	e02e      	b.n	800293a <UART_SetConfig+0x216>
 80028dc:	2310      	movs	r3, #16
 80028de:	77fb      	strb	r3, [r7, #31]
 80028e0:	e02b      	b.n	800293a <UART_SetConfig+0x216>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a5b      	ldr	r2, [pc, #364]	; (8002a54 <UART_SetConfig+0x330>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d124      	bne.n	8002936 <UART_SetConfig+0x212>
 80028ec:	4b55      	ldr	r3, [pc, #340]	; (8002a44 <UART_SetConfig+0x320>)
 80028ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80028f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028f8:	d011      	beq.n	800291e <UART_SetConfig+0x1fa>
 80028fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028fe:	d817      	bhi.n	8002930 <UART_SetConfig+0x20c>
 8002900:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002904:	d011      	beq.n	800292a <UART_SetConfig+0x206>
 8002906:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800290a:	d811      	bhi.n	8002930 <UART_SetConfig+0x20c>
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <UART_SetConfig+0x1f4>
 8002910:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002914:	d006      	beq.n	8002924 <UART_SetConfig+0x200>
 8002916:	e00b      	b.n	8002930 <UART_SetConfig+0x20c>
 8002918:	2300      	movs	r3, #0
 800291a:	77fb      	strb	r3, [r7, #31]
 800291c:	e00d      	b.n	800293a <UART_SetConfig+0x216>
 800291e:	2302      	movs	r3, #2
 8002920:	77fb      	strb	r3, [r7, #31]
 8002922:	e00a      	b.n	800293a <UART_SetConfig+0x216>
 8002924:	2304      	movs	r3, #4
 8002926:	77fb      	strb	r3, [r7, #31]
 8002928:	e007      	b.n	800293a <UART_SetConfig+0x216>
 800292a:	2308      	movs	r3, #8
 800292c:	77fb      	strb	r3, [r7, #31]
 800292e:	e004      	b.n	800293a <UART_SetConfig+0x216>
 8002930:	2310      	movs	r3, #16
 8002932:	77fb      	strb	r3, [r7, #31]
 8002934:	e001      	b.n	800293a <UART_SetConfig+0x216>
 8002936:	2310      	movs	r3, #16
 8002938:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002942:	d15c      	bne.n	80029fe <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8002944:	7ffb      	ldrb	r3, [r7, #31]
 8002946:	2b08      	cmp	r3, #8
 8002948:	d827      	bhi.n	800299a <UART_SetConfig+0x276>
 800294a:	a201      	add	r2, pc, #4	; (adr r2, 8002950 <UART_SetConfig+0x22c>)
 800294c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002950:	08002975 	.word	0x08002975
 8002954:	0800297d 	.word	0x0800297d
 8002958:	08002985 	.word	0x08002985
 800295c:	0800299b 	.word	0x0800299b
 8002960:	0800298b 	.word	0x0800298b
 8002964:	0800299b 	.word	0x0800299b
 8002968:	0800299b 	.word	0x0800299b
 800296c:	0800299b 	.word	0x0800299b
 8002970:	08002993 	.word	0x08002993
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002974:	f7ff fc00 	bl	8002178 <HAL_RCC_GetPCLK1Freq>
 8002978:	61b8      	str	r0, [r7, #24]
        break;
 800297a:	e013      	b.n	80029a4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800297c:	f7ff fc1e 	bl	80021bc <HAL_RCC_GetPCLK2Freq>
 8002980:	61b8      	str	r0, [r7, #24]
        break;
 8002982:	e00f      	b.n	80029a4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002984:	4b34      	ldr	r3, [pc, #208]	; (8002a58 <UART_SetConfig+0x334>)
 8002986:	61bb      	str	r3, [r7, #24]
        break;
 8002988:	e00c      	b.n	80029a4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800298a:	f7ff fb7f 	bl	800208c <HAL_RCC_GetSysClockFreq>
 800298e:	61b8      	str	r0, [r7, #24]
        break;
 8002990:	e008      	b.n	80029a4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002996:	61bb      	str	r3, [r7, #24]
        break;
 8002998:	e004      	b.n	80029a4 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800299a:	2300      	movs	r3, #0
 800299c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	77bb      	strb	r3, [r7, #30]
        break;
 80029a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f000 8084 	beq.w	8002ab4 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	005a      	lsls	r2, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	085b      	lsrs	r3, r3, #1
 80029b6:	441a      	add	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	2b0f      	cmp	r3, #15
 80029c8:	d916      	bls.n	80029f8 <UART_SetConfig+0x2d4>
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d0:	d212      	bcs.n	80029f8 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	f023 030f 	bic.w	r3, r3, #15
 80029da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	085b      	lsrs	r3, r3, #1
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	89fb      	ldrh	r3, [r7, #14]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	89fa      	ldrh	r2, [r7, #14]
 80029f4:	60da      	str	r2, [r3, #12]
 80029f6:	e05d      	b.n	8002ab4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	77bb      	strb	r3, [r7, #30]
 80029fc:	e05a      	b.n	8002ab4 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 80029fe:	7ffb      	ldrb	r3, [r7, #31]
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d836      	bhi.n	8002a72 <UART_SetConfig+0x34e>
 8002a04:	a201      	add	r2, pc, #4	; (adr r2, 8002a0c <UART_SetConfig+0x2e8>)
 8002a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0a:	bf00      	nop
 8002a0c:	08002a31 	.word	0x08002a31
 8002a10:	08002a39 	.word	0x08002a39
 8002a14:	08002a5d 	.word	0x08002a5d
 8002a18:	08002a73 	.word	0x08002a73
 8002a1c:	08002a63 	.word	0x08002a63
 8002a20:	08002a73 	.word	0x08002a73
 8002a24:	08002a73 	.word	0x08002a73
 8002a28:	08002a73 	.word	0x08002a73
 8002a2c:	08002a6b 	.word	0x08002a6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a30:	f7ff fba2 	bl	8002178 <HAL_RCC_GetPCLK1Freq>
 8002a34:	61b8      	str	r0, [r7, #24]
        break;
 8002a36:	e021      	b.n	8002a7c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a38:	f7ff fbc0 	bl	80021bc <HAL_RCC_GetPCLK2Freq>
 8002a3c:	61b8      	str	r0, [r7, #24]
        break;
 8002a3e:	e01d      	b.n	8002a7c <UART_SetConfig+0x358>
 8002a40:	40013800 	.word	0x40013800
 8002a44:	40021000 	.word	0x40021000
 8002a48:	40004400 	.word	0x40004400
 8002a4c:	40004800 	.word	0x40004800
 8002a50:	40004c00 	.word	0x40004c00
 8002a54:	40005000 	.word	0x40005000
 8002a58:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a5c:	4b1b      	ldr	r3, [pc, #108]	; (8002acc <UART_SetConfig+0x3a8>)
 8002a5e:	61bb      	str	r3, [r7, #24]
        break;
 8002a60:	e00c      	b.n	8002a7c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a62:	f7ff fb13 	bl	800208c <HAL_RCC_GetSysClockFreq>
 8002a66:	61b8      	str	r0, [r7, #24]
        break;
 8002a68:	e008      	b.n	8002a7c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a6e:	61bb      	str	r3, [r7, #24]
        break;
 8002a70:	e004      	b.n	8002a7c <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	77bb      	strb	r3, [r7, #30]
        break;
 8002a7a:	bf00      	nop
    }

    if (pclk != 0U)
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d018      	beq.n	8002ab4 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	085a      	lsrs	r2, r3, #1
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	441a      	add	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	2b0f      	cmp	r3, #15
 8002a9c:	d908      	bls.n	8002ab0 <UART_SetConfig+0x38c>
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa4:	d204      	bcs.n	8002ab0 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	60da      	str	r2, [r3, #12]
 8002aae:	e001      	b.n	8002ab4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002ac0:	7fbb      	ldrb	r3, [r7, #30]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3720      	adds	r7, #32
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	007a1200 	.word	0x007a1200

08002ad0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00a      	beq.n	8002afa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00a      	beq.n	8002b1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00a      	beq.n	8002b3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00a      	beq.n	8002b60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	f003 0310 	and.w	r3, r3, #16
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00a      	beq.n	8002b82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	f003 0320 	and.w	r3, r3, #32
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00a      	beq.n	8002ba4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d01a      	beq.n	8002be6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bce:	d10a      	bne.n	8002be6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00a      	beq.n	8002c08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	605a      	str	r2, [r3, #4]
  }
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af02      	add	r7, sp, #8
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c24:	f7fd fdf4 	bl	8000810 <HAL_GetTick>
 8002c28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d10e      	bne.n	8002c56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f82d 	bl	8002ca6 <UART_WaitOnFlagUntilTimeout>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e023      	b.n	8002c9e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d10e      	bne.n	8002c82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f817 	bl	8002ca6 <UART_WaitOnFlagUntilTimeout>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e00d      	b.n	8002c9e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2220      	movs	r2, #32
 8002c86:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b09c      	sub	sp, #112	; 0x70
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	603b      	str	r3, [r7, #0]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cb6:	e0a5      	b.n	8002e04 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbe:	f000 80a1 	beq.w	8002e04 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc2:	f7fd fda5 	bl	8000810 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d302      	bcc.n	8002cd8 <UART_WaitOnFlagUntilTimeout+0x32>
 8002cd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d13e      	bne.n	8002d56 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ce0:	e853 3f00 	ldrex	r3, [r3]
 8002ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ce8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002cec:	667b      	str	r3, [r7, #100]	; 0x64
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cf8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002cfc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002cfe:	e841 2300 	strex	r3, r2, [r1]
 8002d02:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1e6      	bne.n	8002cd8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	3308      	adds	r3, #8
 8002d10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d14:	e853 3f00 	ldrex	r3, [r3]
 8002d18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1c:	f023 0301 	bic.w	r3, r3, #1
 8002d20:	663b      	str	r3, [r7, #96]	; 0x60
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	3308      	adds	r3, #8
 8002d28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d2a:	64ba      	str	r2, [r7, #72]	; 0x48
 8002d2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002d30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d32:	e841 2300 	strex	r3, r2, [r1]
 8002d36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1e5      	bne.n	8002d0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2220      	movs	r2, #32
 8002d42:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2220      	movs	r2, #32
 8002d48:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e067      	b.n	8002e26 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d04f      	beq.n	8002e04 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d72:	d147      	bne.n	8002e04 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d7c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d86:	e853 3f00 	ldrex	r3, [r3]
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d9e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002da2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002da4:	e841 2300 	strex	r3, r2, [r1]
 8002da8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1e6      	bne.n	8002d7e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	3308      	adds	r3, #8
 8002db6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	e853 3f00 	ldrex	r3, [r3]
 8002dbe:	613b      	str	r3, [r7, #16]
   return(result);
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	f023 0301 	bic.w	r3, r3, #1
 8002dc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	3308      	adds	r3, #8
 8002dce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002dd0:	623a      	str	r2, [r7, #32]
 8002dd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd4:	69f9      	ldr	r1, [r7, #28]
 8002dd6:	6a3a      	ldr	r2, [r7, #32]
 8002dd8:	e841 2300 	strex	r3, r2, [r1]
 8002ddc:	61bb      	str	r3, [r7, #24]
   return(result);
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1e5      	bne.n	8002db0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2220      	movs	r2, #32
 8002de8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2220      	movs	r2, #32
 8002dee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2220      	movs	r2, #32
 8002df4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e010      	b.n	8002e26 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	69da      	ldr	r2, [r3, #28]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	bf0c      	ite	eq
 8002e14:	2301      	moveq	r3, #1
 8002e16:	2300      	movne	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	f43f af4a 	beq.w	8002cb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3770      	adds	r7, #112	; 0x70
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <__errno>:
 8002e30:	4b01      	ldr	r3, [pc, #4]	; (8002e38 <__errno+0x8>)
 8002e32:	6818      	ldr	r0, [r3, #0]
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	2000000c 	.word	0x2000000c

08002e3c <__libc_init_array>:
 8002e3c:	b570      	push	{r4, r5, r6, lr}
 8002e3e:	4d0d      	ldr	r5, [pc, #52]	; (8002e74 <__libc_init_array+0x38>)
 8002e40:	4c0d      	ldr	r4, [pc, #52]	; (8002e78 <__libc_init_array+0x3c>)
 8002e42:	1b64      	subs	r4, r4, r5
 8002e44:	10a4      	asrs	r4, r4, #2
 8002e46:	2600      	movs	r6, #0
 8002e48:	42a6      	cmp	r6, r4
 8002e4a:	d109      	bne.n	8002e60 <__libc_init_array+0x24>
 8002e4c:	4d0b      	ldr	r5, [pc, #44]	; (8002e7c <__libc_init_array+0x40>)
 8002e4e:	4c0c      	ldr	r4, [pc, #48]	; (8002e80 <__libc_init_array+0x44>)
 8002e50:	f000 fcea 	bl	8003828 <_init>
 8002e54:	1b64      	subs	r4, r4, r5
 8002e56:	10a4      	asrs	r4, r4, #2
 8002e58:	2600      	movs	r6, #0
 8002e5a:	42a6      	cmp	r6, r4
 8002e5c:	d105      	bne.n	8002e6a <__libc_init_array+0x2e>
 8002e5e:	bd70      	pop	{r4, r5, r6, pc}
 8002e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e64:	4798      	blx	r3
 8002e66:	3601      	adds	r6, #1
 8002e68:	e7ee      	b.n	8002e48 <__libc_init_array+0xc>
 8002e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e6e:	4798      	blx	r3
 8002e70:	3601      	adds	r6, #1
 8002e72:	e7f2      	b.n	8002e5a <__libc_init_array+0x1e>
 8002e74:	080038d4 	.word	0x080038d4
 8002e78:	080038d4 	.word	0x080038d4
 8002e7c:	080038d4 	.word	0x080038d4
 8002e80:	080038d8 	.word	0x080038d8

08002e84 <__itoa>:
 8002e84:	1e93      	subs	r3, r2, #2
 8002e86:	2b22      	cmp	r3, #34	; 0x22
 8002e88:	b510      	push	{r4, lr}
 8002e8a:	460c      	mov	r4, r1
 8002e8c:	d904      	bls.n	8002e98 <__itoa+0x14>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	700b      	strb	r3, [r1, #0]
 8002e92:	461c      	mov	r4, r3
 8002e94:	4620      	mov	r0, r4
 8002e96:	bd10      	pop	{r4, pc}
 8002e98:	2a0a      	cmp	r2, #10
 8002e9a:	d109      	bne.n	8002eb0 <__itoa+0x2c>
 8002e9c:	2800      	cmp	r0, #0
 8002e9e:	da07      	bge.n	8002eb0 <__itoa+0x2c>
 8002ea0:	232d      	movs	r3, #45	; 0x2d
 8002ea2:	700b      	strb	r3, [r1, #0]
 8002ea4:	4240      	negs	r0, r0
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	4421      	add	r1, r4
 8002eaa:	f000 f82d 	bl	8002f08 <__utoa>
 8002eae:	e7f1      	b.n	8002e94 <__itoa+0x10>
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	e7f9      	b.n	8002ea8 <__itoa+0x24>

08002eb4 <itoa>:
 8002eb4:	f7ff bfe6 	b.w	8002e84 <__itoa>

08002eb8 <memset>:
 8002eb8:	4402      	add	r2, r0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d100      	bne.n	8002ec2 <memset+0xa>
 8002ec0:	4770      	bx	lr
 8002ec2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ec6:	e7f9      	b.n	8002ebc <memset+0x4>

08002ec8 <siprintf>:
 8002ec8:	b40e      	push	{r1, r2, r3}
 8002eca:	b500      	push	{lr}
 8002ecc:	b09c      	sub	sp, #112	; 0x70
 8002ece:	ab1d      	add	r3, sp, #116	; 0x74
 8002ed0:	9002      	str	r0, [sp, #8]
 8002ed2:	9006      	str	r0, [sp, #24]
 8002ed4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002ed8:	4809      	ldr	r0, [pc, #36]	; (8002f00 <siprintf+0x38>)
 8002eda:	9107      	str	r1, [sp, #28]
 8002edc:	9104      	str	r1, [sp, #16]
 8002ede:	4909      	ldr	r1, [pc, #36]	; (8002f04 <siprintf+0x3c>)
 8002ee0:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ee4:	9105      	str	r1, [sp, #20]
 8002ee6:	6800      	ldr	r0, [r0, #0]
 8002ee8:	9301      	str	r3, [sp, #4]
 8002eea:	a902      	add	r1, sp, #8
 8002eec:	f000 f8aa 	bl	8003044 <_svfiprintf_r>
 8002ef0:	9b02      	ldr	r3, [sp, #8]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	701a      	strb	r2, [r3, #0]
 8002ef6:	b01c      	add	sp, #112	; 0x70
 8002ef8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002efc:	b003      	add	sp, #12
 8002efe:	4770      	bx	lr
 8002f00:	2000000c 	.word	0x2000000c
 8002f04:	ffff0208 	.word	0xffff0208

08002f08 <__utoa>:
 8002f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f0a:	4c1f      	ldr	r4, [pc, #124]	; (8002f88 <__utoa+0x80>)
 8002f0c:	b08b      	sub	sp, #44	; 0x2c
 8002f0e:	4605      	mov	r5, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	466e      	mov	r6, sp
 8002f14:	f104 0c20 	add.w	ip, r4, #32
 8002f18:	6820      	ldr	r0, [r4, #0]
 8002f1a:	6861      	ldr	r1, [r4, #4]
 8002f1c:	4637      	mov	r7, r6
 8002f1e:	c703      	stmia	r7!, {r0, r1}
 8002f20:	3408      	adds	r4, #8
 8002f22:	4564      	cmp	r4, ip
 8002f24:	463e      	mov	r6, r7
 8002f26:	d1f7      	bne.n	8002f18 <__utoa+0x10>
 8002f28:	7921      	ldrb	r1, [r4, #4]
 8002f2a:	7139      	strb	r1, [r7, #4]
 8002f2c:	1e91      	subs	r1, r2, #2
 8002f2e:	6820      	ldr	r0, [r4, #0]
 8002f30:	6038      	str	r0, [r7, #0]
 8002f32:	2922      	cmp	r1, #34	; 0x22
 8002f34:	f04f 0100 	mov.w	r1, #0
 8002f38:	d904      	bls.n	8002f44 <__utoa+0x3c>
 8002f3a:	7019      	strb	r1, [r3, #0]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4618      	mov	r0, r3
 8002f40:	b00b      	add	sp, #44	; 0x2c
 8002f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f44:	1e58      	subs	r0, r3, #1
 8002f46:	4684      	mov	ip, r0
 8002f48:	fbb5 f7f2 	udiv	r7, r5, r2
 8002f4c:	fb02 5617 	mls	r6, r2, r7, r5
 8002f50:	3628      	adds	r6, #40	; 0x28
 8002f52:	446e      	add	r6, sp
 8002f54:	460c      	mov	r4, r1
 8002f56:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8002f5a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8002f5e:	462e      	mov	r6, r5
 8002f60:	42b2      	cmp	r2, r6
 8002f62:	f101 0101 	add.w	r1, r1, #1
 8002f66:	463d      	mov	r5, r7
 8002f68:	d9ee      	bls.n	8002f48 <__utoa+0x40>
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	545a      	strb	r2, [r3, r1]
 8002f6e:	1919      	adds	r1, r3, r4
 8002f70:	1aa5      	subs	r5, r4, r2
 8002f72:	42aa      	cmp	r2, r5
 8002f74:	dae3      	bge.n	8002f3e <__utoa+0x36>
 8002f76:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002f7a:	780e      	ldrb	r6, [r1, #0]
 8002f7c:	7006      	strb	r6, [r0, #0]
 8002f7e:	3201      	adds	r2, #1
 8002f80:	f801 5901 	strb.w	r5, [r1], #-1
 8002f84:	e7f4      	b.n	8002f70 <__utoa+0x68>
 8002f86:	bf00      	nop
 8002f88:	0800387c 	.word	0x0800387c

08002f8c <__ssputs_r>:
 8002f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f90:	688e      	ldr	r6, [r1, #8]
 8002f92:	429e      	cmp	r6, r3
 8002f94:	4682      	mov	sl, r0
 8002f96:	460c      	mov	r4, r1
 8002f98:	4690      	mov	r8, r2
 8002f9a:	461f      	mov	r7, r3
 8002f9c:	d838      	bhi.n	8003010 <__ssputs_r+0x84>
 8002f9e:	898a      	ldrh	r2, [r1, #12]
 8002fa0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002fa4:	d032      	beq.n	800300c <__ssputs_r+0x80>
 8002fa6:	6825      	ldr	r5, [r4, #0]
 8002fa8:	6909      	ldr	r1, [r1, #16]
 8002faa:	eba5 0901 	sub.w	r9, r5, r1
 8002fae:	6965      	ldr	r5, [r4, #20]
 8002fb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002fb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002fb8:	3301      	adds	r3, #1
 8002fba:	444b      	add	r3, r9
 8002fbc:	106d      	asrs	r5, r5, #1
 8002fbe:	429d      	cmp	r5, r3
 8002fc0:	bf38      	it	cc
 8002fc2:	461d      	movcc	r5, r3
 8002fc4:	0553      	lsls	r3, r2, #21
 8002fc6:	d531      	bpl.n	800302c <__ssputs_r+0xa0>
 8002fc8:	4629      	mov	r1, r5
 8002fca:	f000 fb63 	bl	8003694 <_malloc_r>
 8002fce:	4606      	mov	r6, r0
 8002fd0:	b950      	cbnz	r0, 8002fe8 <__ssputs_r+0x5c>
 8002fd2:	230c      	movs	r3, #12
 8002fd4:	f8ca 3000 	str.w	r3, [sl]
 8002fd8:	89a3      	ldrh	r3, [r4, #12]
 8002fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fde:	81a3      	strh	r3, [r4, #12]
 8002fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fe8:	6921      	ldr	r1, [r4, #16]
 8002fea:	464a      	mov	r2, r9
 8002fec:	f000 fabe 	bl	800356c <memcpy>
 8002ff0:	89a3      	ldrh	r3, [r4, #12]
 8002ff2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ffa:	81a3      	strh	r3, [r4, #12]
 8002ffc:	6126      	str	r6, [r4, #16]
 8002ffe:	6165      	str	r5, [r4, #20]
 8003000:	444e      	add	r6, r9
 8003002:	eba5 0509 	sub.w	r5, r5, r9
 8003006:	6026      	str	r6, [r4, #0]
 8003008:	60a5      	str	r5, [r4, #8]
 800300a:	463e      	mov	r6, r7
 800300c:	42be      	cmp	r6, r7
 800300e:	d900      	bls.n	8003012 <__ssputs_r+0x86>
 8003010:	463e      	mov	r6, r7
 8003012:	6820      	ldr	r0, [r4, #0]
 8003014:	4632      	mov	r2, r6
 8003016:	4641      	mov	r1, r8
 8003018:	f000 fab6 	bl	8003588 <memmove>
 800301c:	68a3      	ldr	r3, [r4, #8]
 800301e:	1b9b      	subs	r3, r3, r6
 8003020:	60a3      	str	r3, [r4, #8]
 8003022:	6823      	ldr	r3, [r4, #0]
 8003024:	4433      	add	r3, r6
 8003026:	6023      	str	r3, [r4, #0]
 8003028:	2000      	movs	r0, #0
 800302a:	e7db      	b.n	8002fe4 <__ssputs_r+0x58>
 800302c:	462a      	mov	r2, r5
 800302e:	f000 fba5 	bl	800377c <_realloc_r>
 8003032:	4606      	mov	r6, r0
 8003034:	2800      	cmp	r0, #0
 8003036:	d1e1      	bne.n	8002ffc <__ssputs_r+0x70>
 8003038:	6921      	ldr	r1, [r4, #16]
 800303a:	4650      	mov	r0, sl
 800303c:	f000 fabe 	bl	80035bc <_free_r>
 8003040:	e7c7      	b.n	8002fd2 <__ssputs_r+0x46>
	...

08003044 <_svfiprintf_r>:
 8003044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003048:	4698      	mov	r8, r3
 800304a:	898b      	ldrh	r3, [r1, #12]
 800304c:	061b      	lsls	r3, r3, #24
 800304e:	b09d      	sub	sp, #116	; 0x74
 8003050:	4607      	mov	r7, r0
 8003052:	460d      	mov	r5, r1
 8003054:	4614      	mov	r4, r2
 8003056:	d50e      	bpl.n	8003076 <_svfiprintf_r+0x32>
 8003058:	690b      	ldr	r3, [r1, #16]
 800305a:	b963      	cbnz	r3, 8003076 <_svfiprintf_r+0x32>
 800305c:	2140      	movs	r1, #64	; 0x40
 800305e:	f000 fb19 	bl	8003694 <_malloc_r>
 8003062:	6028      	str	r0, [r5, #0]
 8003064:	6128      	str	r0, [r5, #16]
 8003066:	b920      	cbnz	r0, 8003072 <_svfiprintf_r+0x2e>
 8003068:	230c      	movs	r3, #12
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	f04f 30ff 	mov.w	r0, #4294967295
 8003070:	e0d1      	b.n	8003216 <_svfiprintf_r+0x1d2>
 8003072:	2340      	movs	r3, #64	; 0x40
 8003074:	616b      	str	r3, [r5, #20]
 8003076:	2300      	movs	r3, #0
 8003078:	9309      	str	r3, [sp, #36]	; 0x24
 800307a:	2320      	movs	r3, #32
 800307c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003080:	f8cd 800c 	str.w	r8, [sp, #12]
 8003084:	2330      	movs	r3, #48	; 0x30
 8003086:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003230 <_svfiprintf_r+0x1ec>
 800308a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800308e:	f04f 0901 	mov.w	r9, #1
 8003092:	4623      	mov	r3, r4
 8003094:	469a      	mov	sl, r3
 8003096:	f813 2b01 	ldrb.w	r2, [r3], #1
 800309a:	b10a      	cbz	r2, 80030a0 <_svfiprintf_r+0x5c>
 800309c:	2a25      	cmp	r2, #37	; 0x25
 800309e:	d1f9      	bne.n	8003094 <_svfiprintf_r+0x50>
 80030a0:	ebba 0b04 	subs.w	fp, sl, r4
 80030a4:	d00b      	beq.n	80030be <_svfiprintf_r+0x7a>
 80030a6:	465b      	mov	r3, fp
 80030a8:	4622      	mov	r2, r4
 80030aa:	4629      	mov	r1, r5
 80030ac:	4638      	mov	r0, r7
 80030ae:	f7ff ff6d 	bl	8002f8c <__ssputs_r>
 80030b2:	3001      	adds	r0, #1
 80030b4:	f000 80aa 	beq.w	800320c <_svfiprintf_r+0x1c8>
 80030b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80030ba:	445a      	add	r2, fp
 80030bc:	9209      	str	r2, [sp, #36]	; 0x24
 80030be:	f89a 3000 	ldrb.w	r3, [sl]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 80a2 	beq.w	800320c <_svfiprintf_r+0x1c8>
 80030c8:	2300      	movs	r3, #0
 80030ca:	f04f 32ff 	mov.w	r2, #4294967295
 80030ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80030d2:	f10a 0a01 	add.w	sl, sl, #1
 80030d6:	9304      	str	r3, [sp, #16]
 80030d8:	9307      	str	r3, [sp, #28]
 80030da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80030de:	931a      	str	r3, [sp, #104]	; 0x68
 80030e0:	4654      	mov	r4, sl
 80030e2:	2205      	movs	r2, #5
 80030e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030e8:	4851      	ldr	r0, [pc, #324]	; (8003230 <_svfiprintf_r+0x1ec>)
 80030ea:	f7fd f871 	bl	80001d0 <memchr>
 80030ee:	9a04      	ldr	r2, [sp, #16]
 80030f0:	b9d8      	cbnz	r0, 800312a <_svfiprintf_r+0xe6>
 80030f2:	06d0      	lsls	r0, r2, #27
 80030f4:	bf44      	itt	mi
 80030f6:	2320      	movmi	r3, #32
 80030f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030fc:	0711      	lsls	r1, r2, #28
 80030fe:	bf44      	itt	mi
 8003100:	232b      	movmi	r3, #43	; 0x2b
 8003102:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003106:	f89a 3000 	ldrb.w	r3, [sl]
 800310a:	2b2a      	cmp	r3, #42	; 0x2a
 800310c:	d015      	beq.n	800313a <_svfiprintf_r+0xf6>
 800310e:	9a07      	ldr	r2, [sp, #28]
 8003110:	4654      	mov	r4, sl
 8003112:	2000      	movs	r0, #0
 8003114:	f04f 0c0a 	mov.w	ip, #10
 8003118:	4621      	mov	r1, r4
 800311a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800311e:	3b30      	subs	r3, #48	; 0x30
 8003120:	2b09      	cmp	r3, #9
 8003122:	d94e      	bls.n	80031c2 <_svfiprintf_r+0x17e>
 8003124:	b1b0      	cbz	r0, 8003154 <_svfiprintf_r+0x110>
 8003126:	9207      	str	r2, [sp, #28]
 8003128:	e014      	b.n	8003154 <_svfiprintf_r+0x110>
 800312a:	eba0 0308 	sub.w	r3, r0, r8
 800312e:	fa09 f303 	lsl.w	r3, r9, r3
 8003132:	4313      	orrs	r3, r2
 8003134:	9304      	str	r3, [sp, #16]
 8003136:	46a2      	mov	sl, r4
 8003138:	e7d2      	b.n	80030e0 <_svfiprintf_r+0x9c>
 800313a:	9b03      	ldr	r3, [sp, #12]
 800313c:	1d19      	adds	r1, r3, #4
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	9103      	str	r1, [sp, #12]
 8003142:	2b00      	cmp	r3, #0
 8003144:	bfbb      	ittet	lt
 8003146:	425b      	neglt	r3, r3
 8003148:	f042 0202 	orrlt.w	r2, r2, #2
 800314c:	9307      	strge	r3, [sp, #28]
 800314e:	9307      	strlt	r3, [sp, #28]
 8003150:	bfb8      	it	lt
 8003152:	9204      	strlt	r2, [sp, #16]
 8003154:	7823      	ldrb	r3, [r4, #0]
 8003156:	2b2e      	cmp	r3, #46	; 0x2e
 8003158:	d10c      	bne.n	8003174 <_svfiprintf_r+0x130>
 800315a:	7863      	ldrb	r3, [r4, #1]
 800315c:	2b2a      	cmp	r3, #42	; 0x2a
 800315e:	d135      	bne.n	80031cc <_svfiprintf_r+0x188>
 8003160:	9b03      	ldr	r3, [sp, #12]
 8003162:	1d1a      	adds	r2, r3, #4
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	9203      	str	r2, [sp, #12]
 8003168:	2b00      	cmp	r3, #0
 800316a:	bfb8      	it	lt
 800316c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003170:	3402      	adds	r4, #2
 8003172:	9305      	str	r3, [sp, #20]
 8003174:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003240 <_svfiprintf_r+0x1fc>
 8003178:	7821      	ldrb	r1, [r4, #0]
 800317a:	2203      	movs	r2, #3
 800317c:	4650      	mov	r0, sl
 800317e:	f7fd f827 	bl	80001d0 <memchr>
 8003182:	b140      	cbz	r0, 8003196 <_svfiprintf_r+0x152>
 8003184:	2340      	movs	r3, #64	; 0x40
 8003186:	eba0 000a 	sub.w	r0, r0, sl
 800318a:	fa03 f000 	lsl.w	r0, r3, r0
 800318e:	9b04      	ldr	r3, [sp, #16]
 8003190:	4303      	orrs	r3, r0
 8003192:	3401      	adds	r4, #1
 8003194:	9304      	str	r3, [sp, #16]
 8003196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800319a:	4826      	ldr	r0, [pc, #152]	; (8003234 <_svfiprintf_r+0x1f0>)
 800319c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80031a0:	2206      	movs	r2, #6
 80031a2:	f7fd f815 	bl	80001d0 <memchr>
 80031a6:	2800      	cmp	r0, #0
 80031a8:	d038      	beq.n	800321c <_svfiprintf_r+0x1d8>
 80031aa:	4b23      	ldr	r3, [pc, #140]	; (8003238 <_svfiprintf_r+0x1f4>)
 80031ac:	bb1b      	cbnz	r3, 80031f6 <_svfiprintf_r+0x1b2>
 80031ae:	9b03      	ldr	r3, [sp, #12]
 80031b0:	3307      	adds	r3, #7
 80031b2:	f023 0307 	bic.w	r3, r3, #7
 80031b6:	3308      	adds	r3, #8
 80031b8:	9303      	str	r3, [sp, #12]
 80031ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031bc:	4433      	add	r3, r6
 80031be:	9309      	str	r3, [sp, #36]	; 0x24
 80031c0:	e767      	b.n	8003092 <_svfiprintf_r+0x4e>
 80031c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80031c6:	460c      	mov	r4, r1
 80031c8:	2001      	movs	r0, #1
 80031ca:	e7a5      	b.n	8003118 <_svfiprintf_r+0xd4>
 80031cc:	2300      	movs	r3, #0
 80031ce:	3401      	adds	r4, #1
 80031d0:	9305      	str	r3, [sp, #20]
 80031d2:	4619      	mov	r1, r3
 80031d4:	f04f 0c0a 	mov.w	ip, #10
 80031d8:	4620      	mov	r0, r4
 80031da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031de:	3a30      	subs	r2, #48	; 0x30
 80031e0:	2a09      	cmp	r2, #9
 80031e2:	d903      	bls.n	80031ec <_svfiprintf_r+0x1a8>
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0c5      	beq.n	8003174 <_svfiprintf_r+0x130>
 80031e8:	9105      	str	r1, [sp, #20]
 80031ea:	e7c3      	b.n	8003174 <_svfiprintf_r+0x130>
 80031ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80031f0:	4604      	mov	r4, r0
 80031f2:	2301      	movs	r3, #1
 80031f4:	e7f0      	b.n	80031d8 <_svfiprintf_r+0x194>
 80031f6:	ab03      	add	r3, sp, #12
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	462a      	mov	r2, r5
 80031fc:	4b0f      	ldr	r3, [pc, #60]	; (800323c <_svfiprintf_r+0x1f8>)
 80031fe:	a904      	add	r1, sp, #16
 8003200:	4638      	mov	r0, r7
 8003202:	f3af 8000 	nop.w
 8003206:	1c42      	adds	r2, r0, #1
 8003208:	4606      	mov	r6, r0
 800320a:	d1d6      	bne.n	80031ba <_svfiprintf_r+0x176>
 800320c:	89ab      	ldrh	r3, [r5, #12]
 800320e:	065b      	lsls	r3, r3, #25
 8003210:	f53f af2c 	bmi.w	800306c <_svfiprintf_r+0x28>
 8003214:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003216:	b01d      	add	sp, #116	; 0x74
 8003218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800321c:	ab03      	add	r3, sp, #12
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	462a      	mov	r2, r5
 8003222:	4b06      	ldr	r3, [pc, #24]	; (800323c <_svfiprintf_r+0x1f8>)
 8003224:	a904      	add	r1, sp, #16
 8003226:	4638      	mov	r0, r7
 8003228:	f000 f87a 	bl	8003320 <_printf_i>
 800322c:	e7eb      	b.n	8003206 <_svfiprintf_r+0x1c2>
 800322e:	bf00      	nop
 8003230:	080038a1 	.word	0x080038a1
 8003234:	080038ab 	.word	0x080038ab
 8003238:	00000000 	.word	0x00000000
 800323c:	08002f8d 	.word	0x08002f8d
 8003240:	080038a7 	.word	0x080038a7

08003244 <_printf_common>:
 8003244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003248:	4616      	mov	r6, r2
 800324a:	4699      	mov	r9, r3
 800324c:	688a      	ldr	r2, [r1, #8]
 800324e:	690b      	ldr	r3, [r1, #16]
 8003250:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003254:	4293      	cmp	r3, r2
 8003256:	bfb8      	it	lt
 8003258:	4613      	movlt	r3, r2
 800325a:	6033      	str	r3, [r6, #0]
 800325c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003260:	4607      	mov	r7, r0
 8003262:	460c      	mov	r4, r1
 8003264:	b10a      	cbz	r2, 800326a <_printf_common+0x26>
 8003266:	3301      	adds	r3, #1
 8003268:	6033      	str	r3, [r6, #0]
 800326a:	6823      	ldr	r3, [r4, #0]
 800326c:	0699      	lsls	r1, r3, #26
 800326e:	bf42      	ittt	mi
 8003270:	6833      	ldrmi	r3, [r6, #0]
 8003272:	3302      	addmi	r3, #2
 8003274:	6033      	strmi	r3, [r6, #0]
 8003276:	6825      	ldr	r5, [r4, #0]
 8003278:	f015 0506 	ands.w	r5, r5, #6
 800327c:	d106      	bne.n	800328c <_printf_common+0x48>
 800327e:	f104 0a19 	add.w	sl, r4, #25
 8003282:	68e3      	ldr	r3, [r4, #12]
 8003284:	6832      	ldr	r2, [r6, #0]
 8003286:	1a9b      	subs	r3, r3, r2
 8003288:	42ab      	cmp	r3, r5
 800328a:	dc26      	bgt.n	80032da <_printf_common+0x96>
 800328c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003290:	1e13      	subs	r3, r2, #0
 8003292:	6822      	ldr	r2, [r4, #0]
 8003294:	bf18      	it	ne
 8003296:	2301      	movne	r3, #1
 8003298:	0692      	lsls	r2, r2, #26
 800329a:	d42b      	bmi.n	80032f4 <_printf_common+0xb0>
 800329c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032a0:	4649      	mov	r1, r9
 80032a2:	4638      	mov	r0, r7
 80032a4:	47c0      	blx	r8
 80032a6:	3001      	adds	r0, #1
 80032a8:	d01e      	beq.n	80032e8 <_printf_common+0xa4>
 80032aa:	6823      	ldr	r3, [r4, #0]
 80032ac:	68e5      	ldr	r5, [r4, #12]
 80032ae:	6832      	ldr	r2, [r6, #0]
 80032b0:	f003 0306 	and.w	r3, r3, #6
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	bf08      	it	eq
 80032b8:	1aad      	subeq	r5, r5, r2
 80032ba:	68a3      	ldr	r3, [r4, #8]
 80032bc:	6922      	ldr	r2, [r4, #16]
 80032be:	bf0c      	ite	eq
 80032c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032c4:	2500      	movne	r5, #0
 80032c6:	4293      	cmp	r3, r2
 80032c8:	bfc4      	itt	gt
 80032ca:	1a9b      	subgt	r3, r3, r2
 80032cc:	18ed      	addgt	r5, r5, r3
 80032ce:	2600      	movs	r6, #0
 80032d0:	341a      	adds	r4, #26
 80032d2:	42b5      	cmp	r5, r6
 80032d4:	d11a      	bne.n	800330c <_printf_common+0xc8>
 80032d6:	2000      	movs	r0, #0
 80032d8:	e008      	b.n	80032ec <_printf_common+0xa8>
 80032da:	2301      	movs	r3, #1
 80032dc:	4652      	mov	r2, sl
 80032de:	4649      	mov	r1, r9
 80032e0:	4638      	mov	r0, r7
 80032e2:	47c0      	blx	r8
 80032e4:	3001      	adds	r0, #1
 80032e6:	d103      	bne.n	80032f0 <_printf_common+0xac>
 80032e8:	f04f 30ff 	mov.w	r0, #4294967295
 80032ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032f0:	3501      	adds	r5, #1
 80032f2:	e7c6      	b.n	8003282 <_printf_common+0x3e>
 80032f4:	18e1      	adds	r1, r4, r3
 80032f6:	1c5a      	adds	r2, r3, #1
 80032f8:	2030      	movs	r0, #48	; 0x30
 80032fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032fe:	4422      	add	r2, r4
 8003300:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003304:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003308:	3302      	adds	r3, #2
 800330a:	e7c7      	b.n	800329c <_printf_common+0x58>
 800330c:	2301      	movs	r3, #1
 800330e:	4622      	mov	r2, r4
 8003310:	4649      	mov	r1, r9
 8003312:	4638      	mov	r0, r7
 8003314:	47c0      	blx	r8
 8003316:	3001      	adds	r0, #1
 8003318:	d0e6      	beq.n	80032e8 <_printf_common+0xa4>
 800331a:	3601      	adds	r6, #1
 800331c:	e7d9      	b.n	80032d2 <_printf_common+0x8e>
	...

08003320 <_printf_i>:
 8003320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003324:	7e0f      	ldrb	r7, [r1, #24]
 8003326:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003328:	2f78      	cmp	r7, #120	; 0x78
 800332a:	4691      	mov	r9, r2
 800332c:	4680      	mov	r8, r0
 800332e:	460c      	mov	r4, r1
 8003330:	469a      	mov	sl, r3
 8003332:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003336:	d807      	bhi.n	8003348 <_printf_i+0x28>
 8003338:	2f62      	cmp	r7, #98	; 0x62
 800333a:	d80a      	bhi.n	8003352 <_printf_i+0x32>
 800333c:	2f00      	cmp	r7, #0
 800333e:	f000 80d8 	beq.w	80034f2 <_printf_i+0x1d2>
 8003342:	2f58      	cmp	r7, #88	; 0x58
 8003344:	f000 80a3 	beq.w	800348e <_printf_i+0x16e>
 8003348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800334c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003350:	e03a      	b.n	80033c8 <_printf_i+0xa8>
 8003352:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003356:	2b15      	cmp	r3, #21
 8003358:	d8f6      	bhi.n	8003348 <_printf_i+0x28>
 800335a:	a101      	add	r1, pc, #4	; (adr r1, 8003360 <_printf_i+0x40>)
 800335c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003360:	080033b9 	.word	0x080033b9
 8003364:	080033cd 	.word	0x080033cd
 8003368:	08003349 	.word	0x08003349
 800336c:	08003349 	.word	0x08003349
 8003370:	08003349 	.word	0x08003349
 8003374:	08003349 	.word	0x08003349
 8003378:	080033cd 	.word	0x080033cd
 800337c:	08003349 	.word	0x08003349
 8003380:	08003349 	.word	0x08003349
 8003384:	08003349 	.word	0x08003349
 8003388:	08003349 	.word	0x08003349
 800338c:	080034d9 	.word	0x080034d9
 8003390:	080033fd 	.word	0x080033fd
 8003394:	080034bb 	.word	0x080034bb
 8003398:	08003349 	.word	0x08003349
 800339c:	08003349 	.word	0x08003349
 80033a0:	080034fb 	.word	0x080034fb
 80033a4:	08003349 	.word	0x08003349
 80033a8:	080033fd 	.word	0x080033fd
 80033ac:	08003349 	.word	0x08003349
 80033b0:	08003349 	.word	0x08003349
 80033b4:	080034c3 	.word	0x080034c3
 80033b8:	682b      	ldr	r3, [r5, #0]
 80033ba:	1d1a      	adds	r2, r3, #4
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	602a      	str	r2, [r5, #0]
 80033c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033c8:	2301      	movs	r3, #1
 80033ca:	e0a3      	b.n	8003514 <_printf_i+0x1f4>
 80033cc:	6820      	ldr	r0, [r4, #0]
 80033ce:	6829      	ldr	r1, [r5, #0]
 80033d0:	0606      	lsls	r6, r0, #24
 80033d2:	f101 0304 	add.w	r3, r1, #4
 80033d6:	d50a      	bpl.n	80033ee <_printf_i+0xce>
 80033d8:	680e      	ldr	r6, [r1, #0]
 80033da:	602b      	str	r3, [r5, #0]
 80033dc:	2e00      	cmp	r6, #0
 80033de:	da03      	bge.n	80033e8 <_printf_i+0xc8>
 80033e0:	232d      	movs	r3, #45	; 0x2d
 80033e2:	4276      	negs	r6, r6
 80033e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033e8:	485e      	ldr	r0, [pc, #376]	; (8003564 <_printf_i+0x244>)
 80033ea:	230a      	movs	r3, #10
 80033ec:	e019      	b.n	8003422 <_printf_i+0x102>
 80033ee:	680e      	ldr	r6, [r1, #0]
 80033f0:	602b      	str	r3, [r5, #0]
 80033f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80033f6:	bf18      	it	ne
 80033f8:	b236      	sxthne	r6, r6
 80033fa:	e7ef      	b.n	80033dc <_printf_i+0xbc>
 80033fc:	682b      	ldr	r3, [r5, #0]
 80033fe:	6820      	ldr	r0, [r4, #0]
 8003400:	1d19      	adds	r1, r3, #4
 8003402:	6029      	str	r1, [r5, #0]
 8003404:	0601      	lsls	r1, r0, #24
 8003406:	d501      	bpl.n	800340c <_printf_i+0xec>
 8003408:	681e      	ldr	r6, [r3, #0]
 800340a:	e002      	b.n	8003412 <_printf_i+0xf2>
 800340c:	0646      	lsls	r6, r0, #25
 800340e:	d5fb      	bpl.n	8003408 <_printf_i+0xe8>
 8003410:	881e      	ldrh	r6, [r3, #0]
 8003412:	4854      	ldr	r0, [pc, #336]	; (8003564 <_printf_i+0x244>)
 8003414:	2f6f      	cmp	r7, #111	; 0x6f
 8003416:	bf0c      	ite	eq
 8003418:	2308      	moveq	r3, #8
 800341a:	230a      	movne	r3, #10
 800341c:	2100      	movs	r1, #0
 800341e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003422:	6865      	ldr	r5, [r4, #4]
 8003424:	60a5      	str	r5, [r4, #8]
 8003426:	2d00      	cmp	r5, #0
 8003428:	bfa2      	ittt	ge
 800342a:	6821      	ldrge	r1, [r4, #0]
 800342c:	f021 0104 	bicge.w	r1, r1, #4
 8003430:	6021      	strge	r1, [r4, #0]
 8003432:	b90e      	cbnz	r6, 8003438 <_printf_i+0x118>
 8003434:	2d00      	cmp	r5, #0
 8003436:	d04d      	beq.n	80034d4 <_printf_i+0x1b4>
 8003438:	4615      	mov	r5, r2
 800343a:	fbb6 f1f3 	udiv	r1, r6, r3
 800343e:	fb03 6711 	mls	r7, r3, r1, r6
 8003442:	5dc7      	ldrb	r7, [r0, r7]
 8003444:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003448:	4637      	mov	r7, r6
 800344a:	42bb      	cmp	r3, r7
 800344c:	460e      	mov	r6, r1
 800344e:	d9f4      	bls.n	800343a <_printf_i+0x11a>
 8003450:	2b08      	cmp	r3, #8
 8003452:	d10b      	bne.n	800346c <_printf_i+0x14c>
 8003454:	6823      	ldr	r3, [r4, #0]
 8003456:	07de      	lsls	r6, r3, #31
 8003458:	d508      	bpl.n	800346c <_printf_i+0x14c>
 800345a:	6923      	ldr	r3, [r4, #16]
 800345c:	6861      	ldr	r1, [r4, #4]
 800345e:	4299      	cmp	r1, r3
 8003460:	bfde      	ittt	le
 8003462:	2330      	movle	r3, #48	; 0x30
 8003464:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003468:	f105 35ff 	addle.w	r5, r5, #4294967295
 800346c:	1b52      	subs	r2, r2, r5
 800346e:	6122      	str	r2, [r4, #16]
 8003470:	f8cd a000 	str.w	sl, [sp]
 8003474:	464b      	mov	r3, r9
 8003476:	aa03      	add	r2, sp, #12
 8003478:	4621      	mov	r1, r4
 800347a:	4640      	mov	r0, r8
 800347c:	f7ff fee2 	bl	8003244 <_printf_common>
 8003480:	3001      	adds	r0, #1
 8003482:	d14c      	bne.n	800351e <_printf_i+0x1fe>
 8003484:	f04f 30ff 	mov.w	r0, #4294967295
 8003488:	b004      	add	sp, #16
 800348a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800348e:	4835      	ldr	r0, [pc, #212]	; (8003564 <_printf_i+0x244>)
 8003490:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003494:	6829      	ldr	r1, [r5, #0]
 8003496:	6823      	ldr	r3, [r4, #0]
 8003498:	f851 6b04 	ldr.w	r6, [r1], #4
 800349c:	6029      	str	r1, [r5, #0]
 800349e:	061d      	lsls	r5, r3, #24
 80034a0:	d514      	bpl.n	80034cc <_printf_i+0x1ac>
 80034a2:	07df      	lsls	r7, r3, #31
 80034a4:	bf44      	itt	mi
 80034a6:	f043 0320 	orrmi.w	r3, r3, #32
 80034aa:	6023      	strmi	r3, [r4, #0]
 80034ac:	b91e      	cbnz	r6, 80034b6 <_printf_i+0x196>
 80034ae:	6823      	ldr	r3, [r4, #0]
 80034b0:	f023 0320 	bic.w	r3, r3, #32
 80034b4:	6023      	str	r3, [r4, #0]
 80034b6:	2310      	movs	r3, #16
 80034b8:	e7b0      	b.n	800341c <_printf_i+0xfc>
 80034ba:	6823      	ldr	r3, [r4, #0]
 80034bc:	f043 0320 	orr.w	r3, r3, #32
 80034c0:	6023      	str	r3, [r4, #0]
 80034c2:	2378      	movs	r3, #120	; 0x78
 80034c4:	4828      	ldr	r0, [pc, #160]	; (8003568 <_printf_i+0x248>)
 80034c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80034ca:	e7e3      	b.n	8003494 <_printf_i+0x174>
 80034cc:	0659      	lsls	r1, r3, #25
 80034ce:	bf48      	it	mi
 80034d0:	b2b6      	uxthmi	r6, r6
 80034d2:	e7e6      	b.n	80034a2 <_printf_i+0x182>
 80034d4:	4615      	mov	r5, r2
 80034d6:	e7bb      	b.n	8003450 <_printf_i+0x130>
 80034d8:	682b      	ldr	r3, [r5, #0]
 80034da:	6826      	ldr	r6, [r4, #0]
 80034dc:	6961      	ldr	r1, [r4, #20]
 80034de:	1d18      	adds	r0, r3, #4
 80034e0:	6028      	str	r0, [r5, #0]
 80034e2:	0635      	lsls	r5, r6, #24
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	d501      	bpl.n	80034ec <_printf_i+0x1cc>
 80034e8:	6019      	str	r1, [r3, #0]
 80034ea:	e002      	b.n	80034f2 <_printf_i+0x1d2>
 80034ec:	0670      	lsls	r0, r6, #25
 80034ee:	d5fb      	bpl.n	80034e8 <_printf_i+0x1c8>
 80034f0:	8019      	strh	r1, [r3, #0]
 80034f2:	2300      	movs	r3, #0
 80034f4:	6123      	str	r3, [r4, #16]
 80034f6:	4615      	mov	r5, r2
 80034f8:	e7ba      	b.n	8003470 <_printf_i+0x150>
 80034fa:	682b      	ldr	r3, [r5, #0]
 80034fc:	1d1a      	adds	r2, r3, #4
 80034fe:	602a      	str	r2, [r5, #0]
 8003500:	681d      	ldr	r5, [r3, #0]
 8003502:	6862      	ldr	r2, [r4, #4]
 8003504:	2100      	movs	r1, #0
 8003506:	4628      	mov	r0, r5
 8003508:	f7fc fe62 	bl	80001d0 <memchr>
 800350c:	b108      	cbz	r0, 8003512 <_printf_i+0x1f2>
 800350e:	1b40      	subs	r0, r0, r5
 8003510:	6060      	str	r0, [r4, #4]
 8003512:	6863      	ldr	r3, [r4, #4]
 8003514:	6123      	str	r3, [r4, #16]
 8003516:	2300      	movs	r3, #0
 8003518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800351c:	e7a8      	b.n	8003470 <_printf_i+0x150>
 800351e:	6923      	ldr	r3, [r4, #16]
 8003520:	462a      	mov	r2, r5
 8003522:	4649      	mov	r1, r9
 8003524:	4640      	mov	r0, r8
 8003526:	47d0      	blx	sl
 8003528:	3001      	adds	r0, #1
 800352a:	d0ab      	beq.n	8003484 <_printf_i+0x164>
 800352c:	6823      	ldr	r3, [r4, #0]
 800352e:	079b      	lsls	r3, r3, #30
 8003530:	d413      	bmi.n	800355a <_printf_i+0x23a>
 8003532:	68e0      	ldr	r0, [r4, #12]
 8003534:	9b03      	ldr	r3, [sp, #12]
 8003536:	4298      	cmp	r0, r3
 8003538:	bfb8      	it	lt
 800353a:	4618      	movlt	r0, r3
 800353c:	e7a4      	b.n	8003488 <_printf_i+0x168>
 800353e:	2301      	movs	r3, #1
 8003540:	4632      	mov	r2, r6
 8003542:	4649      	mov	r1, r9
 8003544:	4640      	mov	r0, r8
 8003546:	47d0      	blx	sl
 8003548:	3001      	adds	r0, #1
 800354a:	d09b      	beq.n	8003484 <_printf_i+0x164>
 800354c:	3501      	adds	r5, #1
 800354e:	68e3      	ldr	r3, [r4, #12]
 8003550:	9903      	ldr	r1, [sp, #12]
 8003552:	1a5b      	subs	r3, r3, r1
 8003554:	42ab      	cmp	r3, r5
 8003556:	dcf2      	bgt.n	800353e <_printf_i+0x21e>
 8003558:	e7eb      	b.n	8003532 <_printf_i+0x212>
 800355a:	2500      	movs	r5, #0
 800355c:	f104 0619 	add.w	r6, r4, #25
 8003560:	e7f5      	b.n	800354e <_printf_i+0x22e>
 8003562:	bf00      	nop
 8003564:	080038b2 	.word	0x080038b2
 8003568:	080038c3 	.word	0x080038c3

0800356c <memcpy>:
 800356c:	440a      	add	r2, r1
 800356e:	4291      	cmp	r1, r2
 8003570:	f100 33ff 	add.w	r3, r0, #4294967295
 8003574:	d100      	bne.n	8003578 <memcpy+0xc>
 8003576:	4770      	bx	lr
 8003578:	b510      	push	{r4, lr}
 800357a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800357e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003582:	4291      	cmp	r1, r2
 8003584:	d1f9      	bne.n	800357a <memcpy+0xe>
 8003586:	bd10      	pop	{r4, pc}

08003588 <memmove>:
 8003588:	4288      	cmp	r0, r1
 800358a:	b510      	push	{r4, lr}
 800358c:	eb01 0402 	add.w	r4, r1, r2
 8003590:	d902      	bls.n	8003598 <memmove+0x10>
 8003592:	4284      	cmp	r4, r0
 8003594:	4623      	mov	r3, r4
 8003596:	d807      	bhi.n	80035a8 <memmove+0x20>
 8003598:	1e43      	subs	r3, r0, #1
 800359a:	42a1      	cmp	r1, r4
 800359c:	d008      	beq.n	80035b0 <memmove+0x28>
 800359e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80035a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80035a6:	e7f8      	b.n	800359a <memmove+0x12>
 80035a8:	4402      	add	r2, r0
 80035aa:	4601      	mov	r1, r0
 80035ac:	428a      	cmp	r2, r1
 80035ae:	d100      	bne.n	80035b2 <memmove+0x2a>
 80035b0:	bd10      	pop	{r4, pc}
 80035b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80035b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80035ba:	e7f7      	b.n	80035ac <memmove+0x24>

080035bc <_free_r>:
 80035bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80035be:	2900      	cmp	r1, #0
 80035c0:	d044      	beq.n	800364c <_free_r+0x90>
 80035c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035c6:	9001      	str	r0, [sp, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f1a1 0404 	sub.w	r4, r1, #4
 80035ce:	bfb8      	it	lt
 80035d0:	18e4      	addlt	r4, r4, r3
 80035d2:	f000 f913 	bl	80037fc <__malloc_lock>
 80035d6:	4a1e      	ldr	r2, [pc, #120]	; (8003650 <_free_r+0x94>)
 80035d8:	9801      	ldr	r0, [sp, #4]
 80035da:	6813      	ldr	r3, [r2, #0]
 80035dc:	b933      	cbnz	r3, 80035ec <_free_r+0x30>
 80035de:	6063      	str	r3, [r4, #4]
 80035e0:	6014      	str	r4, [r2, #0]
 80035e2:	b003      	add	sp, #12
 80035e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80035e8:	f000 b90e 	b.w	8003808 <__malloc_unlock>
 80035ec:	42a3      	cmp	r3, r4
 80035ee:	d908      	bls.n	8003602 <_free_r+0x46>
 80035f0:	6825      	ldr	r5, [r4, #0]
 80035f2:	1961      	adds	r1, r4, r5
 80035f4:	428b      	cmp	r3, r1
 80035f6:	bf01      	itttt	eq
 80035f8:	6819      	ldreq	r1, [r3, #0]
 80035fa:	685b      	ldreq	r3, [r3, #4]
 80035fc:	1949      	addeq	r1, r1, r5
 80035fe:	6021      	streq	r1, [r4, #0]
 8003600:	e7ed      	b.n	80035de <_free_r+0x22>
 8003602:	461a      	mov	r2, r3
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	b10b      	cbz	r3, 800360c <_free_r+0x50>
 8003608:	42a3      	cmp	r3, r4
 800360a:	d9fa      	bls.n	8003602 <_free_r+0x46>
 800360c:	6811      	ldr	r1, [r2, #0]
 800360e:	1855      	adds	r5, r2, r1
 8003610:	42a5      	cmp	r5, r4
 8003612:	d10b      	bne.n	800362c <_free_r+0x70>
 8003614:	6824      	ldr	r4, [r4, #0]
 8003616:	4421      	add	r1, r4
 8003618:	1854      	adds	r4, r2, r1
 800361a:	42a3      	cmp	r3, r4
 800361c:	6011      	str	r1, [r2, #0]
 800361e:	d1e0      	bne.n	80035e2 <_free_r+0x26>
 8003620:	681c      	ldr	r4, [r3, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	6053      	str	r3, [r2, #4]
 8003626:	4421      	add	r1, r4
 8003628:	6011      	str	r1, [r2, #0]
 800362a:	e7da      	b.n	80035e2 <_free_r+0x26>
 800362c:	d902      	bls.n	8003634 <_free_r+0x78>
 800362e:	230c      	movs	r3, #12
 8003630:	6003      	str	r3, [r0, #0]
 8003632:	e7d6      	b.n	80035e2 <_free_r+0x26>
 8003634:	6825      	ldr	r5, [r4, #0]
 8003636:	1961      	adds	r1, r4, r5
 8003638:	428b      	cmp	r3, r1
 800363a:	bf04      	itt	eq
 800363c:	6819      	ldreq	r1, [r3, #0]
 800363e:	685b      	ldreq	r3, [r3, #4]
 8003640:	6063      	str	r3, [r4, #4]
 8003642:	bf04      	itt	eq
 8003644:	1949      	addeq	r1, r1, r5
 8003646:	6021      	streq	r1, [r4, #0]
 8003648:	6054      	str	r4, [r2, #4]
 800364a:	e7ca      	b.n	80035e2 <_free_r+0x26>
 800364c:	b003      	add	sp, #12
 800364e:	bd30      	pop	{r4, r5, pc}
 8003650:	200001a8 	.word	0x200001a8

08003654 <sbrk_aligned>:
 8003654:	b570      	push	{r4, r5, r6, lr}
 8003656:	4e0e      	ldr	r6, [pc, #56]	; (8003690 <sbrk_aligned+0x3c>)
 8003658:	460c      	mov	r4, r1
 800365a:	6831      	ldr	r1, [r6, #0]
 800365c:	4605      	mov	r5, r0
 800365e:	b911      	cbnz	r1, 8003666 <sbrk_aligned+0x12>
 8003660:	f000 f8bc 	bl	80037dc <_sbrk_r>
 8003664:	6030      	str	r0, [r6, #0]
 8003666:	4621      	mov	r1, r4
 8003668:	4628      	mov	r0, r5
 800366a:	f000 f8b7 	bl	80037dc <_sbrk_r>
 800366e:	1c43      	adds	r3, r0, #1
 8003670:	d00a      	beq.n	8003688 <sbrk_aligned+0x34>
 8003672:	1cc4      	adds	r4, r0, #3
 8003674:	f024 0403 	bic.w	r4, r4, #3
 8003678:	42a0      	cmp	r0, r4
 800367a:	d007      	beq.n	800368c <sbrk_aligned+0x38>
 800367c:	1a21      	subs	r1, r4, r0
 800367e:	4628      	mov	r0, r5
 8003680:	f000 f8ac 	bl	80037dc <_sbrk_r>
 8003684:	3001      	adds	r0, #1
 8003686:	d101      	bne.n	800368c <sbrk_aligned+0x38>
 8003688:	f04f 34ff 	mov.w	r4, #4294967295
 800368c:	4620      	mov	r0, r4
 800368e:	bd70      	pop	{r4, r5, r6, pc}
 8003690:	200001ac 	.word	0x200001ac

08003694 <_malloc_r>:
 8003694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003698:	1ccd      	adds	r5, r1, #3
 800369a:	f025 0503 	bic.w	r5, r5, #3
 800369e:	3508      	adds	r5, #8
 80036a0:	2d0c      	cmp	r5, #12
 80036a2:	bf38      	it	cc
 80036a4:	250c      	movcc	r5, #12
 80036a6:	2d00      	cmp	r5, #0
 80036a8:	4607      	mov	r7, r0
 80036aa:	db01      	blt.n	80036b0 <_malloc_r+0x1c>
 80036ac:	42a9      	cmp	r1, r5
 80036ae:	d905      	bls.n	80036bc <_malloc_r+0x28>
 80036b0:	230c      	movs	r3, #12
 80036b2:	603b      	str	r3, [r7, #0]
 80036b4:	2600      	movs	r6, #0
 80036b6:	4630      	mov	r0, r6
 80036b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036bc:	4e2e      	ldr	r6, [pc, #184]	; (8003778 <_malloc_r+0xe4>)
 80036be:	f000 f89d 	bl	80037fc <__malloc_lock>
 80036c2:	6833      	ldr	r3, [r6, #0]
 80036c4:	461c      	mov	r4, r3
 80036c6:	bb34      	cbnz	r4, 8003716 <_malloc_r+0x82>
 80036c8:	4629      	mov	r1, r5
 80036ca:	4638      	mov	r0, r7
 80036cc:	f7ff ffc2 	bl	8003654 <sbrk_aligned>
 80036d0:	1c43      	adds	r3, r0, #1
 80036d2:	4604      	mov	r4, r0
 80036d4:	d14d      	bne.n	8003772 <_malloc_r+0xde>
 80036d6:	6834      	ldr	r4, [r6, #0]
 80036d8:	4626      	mov	r6, r4
 80036da:	2e00      	cmp	r6, #0
 80036dc:	d140      	bne.n	8003760 <_malloc_r+0xcc>
 80036de:	6823      	ldr	r3, [r4, #0]
 80036e0:	4631      	mov	r1, r6
 80036e2:	4638      	mov	r0, r7
 80036e4:	eb04 0803 	add.w	r8, r4, r3
 80036e8:	f000 f878 	bl	80037dc <_sbrk_r>
 80036ec:	4580      	cmp	r8, r0
 80036ee:	d13a      	bne.n	8003766 <_malloc_r+0xd2>
 80036f0:	6821      	ldr	r1, [r4, #0]
 80036f2:	3503      	adds	r5, #3
 80036f4:	1a6d      	subs	r5, r5, r1
 80036f6:	f025 0503 	bic.w	r5, r5, #3
 80036fa:	3508      	adds	r5, #8
 80036fc:	2d0c      	cmp	r5, #12
 80036fe:	bf38      	it	cc
 8003700:	250c      	movcc	r5, #12
 8003702:	4629      	mov	r1, r5
 8003704:	4638      	mov	r0, r7
 8003706:	f7ff ffa5 	bl	8003654 <sbrk_aligned>
 800370a:	3001      	adds	r0, #1
 800370c:	d02b      	beq.n	8003766 <_malloc_r+0xd2>
 800370e:	6823      	ldr	r3, [r4, #0]
 8003710:	442b      	add	r3, r5
 8003712:	6023      	str	r3, [r4, #0]
 8003714:	e00e      	b.n	8003734 <_malloc_r+0xa0>
 8003716:	6822      	ldr	r2, [r4, #0]
 8003718:	1b52      	subs	r2, r2, r5
 800371a:	d41e      	bmi.n	800375a <_malloc_r+0xc6>
 800371c:	2a0b      	cmp	r2, #11
 800371e:	d916      	bls.n	800374e <_malloc_r+0xba>
 8003720:	1961      	adds	r1, r4, r5
 8003722:	42a3      	cmp	r3, r4
 8003724:	6025      	str	r5, [r4, #0]
 8003726:	bf18      	it	ne
 8003728:	6059      	strne	r1, [r3, #4]
 800372a:	6863      	ldr	r3, [r4, #4]
 800372c:	bf08      	it	eq
 800372e:	6031      	streq	r1, [r6, #0]
 8003730:	5162      	str	r2, [r4, r5]
 8003732:	604b      	str	r3, [r1, #4]
 8003734:	4638      	mov	r0, r7
 8003736:	f104 060b 	add.w	r6, r4, #11
 800373a:	f000 f865 	bl	8003808 <__malloc_unlock>
 800373e:	f026 0607 	bic.w	r6, r6, #7
 8003742:	1d23      	adds	r3, r4, #4
 8003744:	1af2      	subs	r2, r6, r3
 8003746:	d0b6      	beq.n	80036b6 <_malloc_r+0x22>
 8003748:	1b9b      	subs	r3, r3, r6
 800374a:	50a3      	str	r3, [r4, r2]
 800374c:	e7b3      	b.n	80036b6 <_malloc_r+0x22>
 800374e:	6862      	ldr	r2, [r4, #4]
 8003750:	42a3      	cmp	r3, r4
 8003752:	bf0c      	ite	eq
 8003754:	6032      	streq	r2, [r6, #0]
 8003756:	605a      	strne	r2, [r3, #4]
 8003758:	e7ec      	b.n	8003734 <_malloc_r+0xa0>
 800375a:	4623      	mov	r3, r4
 800375c:	6864      	ldr	r4, [r4, #4]
 800375e:	e7b2      	b.n	80036c6 <_malloc_r+0x32>
 8003760:	4634      	mov	r4, r6
 8003762:	6876      	ldr	r6, [r6, #4]
 8003764:	e7b9      	b.n	80036da <_malloc_r+0x46>
 8003766:	230c      	movs	r3, #12
 8003768:	603b      	str	r3, [r7, #0]
 800376a:	4638      	mov	r0, r7
 800376c:	f000 f84c 	bl	8003808 <__malloc_unlock>
 8003770:	e7a1      	b.n	80036b6 <_malloc_r+0x22>
 8003772:	6025      	str	r5, [r4, #0]
 8003774:	e7de      	b.n	8003734 <_malloc_r+0xa0>
 8003776:	bf00      	nop
 8003778:	200001a8 	.word	0x200001a8

0800377c <_realloc_r>:
 800377c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003780:	4680      	mov	r8, r0
 8003782:	4614      	mov	r4, r2
 8003784:	460e      	mov	r6, r1
 8003786:	b921      	cbnz	r1, 8003792 <_realloc_r+0x16>
 8003788:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800378c:	4611      	mov	r1, r2
 800378e:	f7ff bf81 	b.w	8003694 <_malloc_r>
 8003792:	b92a      	cbnz	r2, 80037a0 <_realloc_r+0x24>
 8003794:	f7ff ff12 	bl	80035bc <_free_r>
 8003798:	4625      	mov	r5, r4
 800379a:	4628      	mov	r0, r5
 800379c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037a0:	f000 f838 	bl	8003814 <_malloc_usable_size_r>
 80037a4:	4284      	cmp	r4, r0
 80037a6:	4607      	mov	r7, r0
 80037a8:	d802      	bhi.n	80037b0 <_realloc_r+0x34>
 80037aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80037ae:	d812      	bhi.n	80037d6 <_realloc_r+0x5a>
 80037b0:	4621      	mov	r1, r4
 80037b2:	4640      	mov	r0, r8
 80037b4:	f7ff ff6e 	bl	8003694 <_malloc_r>
 80037b8:	4605      	mov	r5, r0
 80037ba:	2800      	cmp	r0, #0
 80037bc:	d0ed      	beq.n	800379a <_realloc_r+0x1e>
 80037be:	42bc      	cmp	r4, r7
 80037c0:	4622      	mov	r2, r4
 80037c2:	4631      	mov	r1, r6
 80037c4:	bf28      	it	cs
 80037c6:	463a      	movcs	r2, r7
 80037c8:	f7ff fed0 	bl	800356c <memcpy>
 80037cc:	4631      	mov	r1, r6
 80037ce:	4640      	mov	r0, r8
 80037d0:	f7ff fef4 	bl	80035bc <_free_r>
 80037d4:	e7e1      	b.n	800379a <_realloc_r+0x1e>
 80037d6:	4635      	mov	r5, r6
 80037d8:	e7df      	b.n	800379a <_realloc_r+0x1e>
	...

080037dc <_sbrk_r>:
 80037dc:	b538      	push	{r3, r4, r5, lr}
 80037de:	4d06      	ldr	r5, [pc, #24]	; (80037f8 <_sbrk_r+0x1c>)
 80037e0:	2300      	movs	r3, #0
 80037e2:	4604      	mov	r4, r0
 80037e4:	4608      	mov	r0, r1
 80037e6:	602b      	str	r3, [r5, #0]
 80037e8:	f7fc ff46 	bl	8000678 <_sbrk>
 80037ec:	1c43      	adds	r3, r0, #1
 80037ee:	d102      	bne.n	80037f6 <_sbrk_r+0x1a>
 80037f0:	682b      	ldr	r3, [r5, #0]
 80037f2:	b103      	cbz	r3, 80037f6 <_sbrk_r+0x1a>
 80037f4:	6023      	str	r3, [r4, #0]
 80037f6:	bd38      	pop	{r3, r4, r5, pc}
 80037f8:	200001b0 	.word	0x200001b0

080037fc <__malloc_lock>:
 80037fc:	4801      	ldr	r0, [pc, #4]	; (8003804 <__malloc_lock+0x8>)
 80037fe:	f000 b811 	b.w	8003824 <__retarget_lock_acquire_recursive>
 8003802:	bf00      	nop
 8003804:	200001b4 	.word	0x200001b4

08003808 <__malloc_unlock>:
 8003808:	4801      	ldr	r0, [pc, #4]	; (8003810 <__malloc_unlock+0x8>)
 800380a:	f000 b80c 	b.w	8003826 <__retarget_lock_release_recursive>
 800380e:	bf00      	nop
 8003810:	200001b4 	.word	0x200001b4

08003814 <_malloc_usable_size_r>:
 8003814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003818:	1f18      	subs	r0, r3, #4
 800381a:	2b00      	cmp	r3, #0
 800381c:	bfbc      	itt	lt
 800381e:	580b      	ldrlt	r3, [r1, r0]
 8003820:	18c0      	addlt	r0, r0, r3
 8003822:	4770      	bx	lr

08003824 <__retarget_lock_acquire_recursive>:
 8003824:	4770      	bx	lr

08003826 <__retarget_lock_release_recursive>:
 8003826:	4770      	bx	lr

08003828 <_init>:
 8003828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382a:	bf00      	nop
 800382c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800382e:	bc08      	pop	{r3}
 8003830:	469e      	mov	lr, r3
 8003832:	4770      	bx	lr

08003834 <_fini>:
 8003834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003836:	bf00      	nop
 8003838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800383a:	bc08      	pop	{r3}
 800383c:	469e      	mov	lr, r3
 800383e:	4770      	bx	lr
